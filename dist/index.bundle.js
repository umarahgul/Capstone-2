/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcapstone_2"] = self["webpackChunkcapstone_2"] || []).push([["index"],{

/***/ "./node_modules/css-loader/dist/cjs.js!./src/Style.css":
/*!*************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/Style.css ***!
  \*************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \"./node_modules/css-loader/dist/runtime/noSourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `body {\r\n    background-color: bisque;\r\n}\r\n#hello {\r\n    color: red;\r\n}\r\n.hello {color: yellow;}`, \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://capstone-2/./src/Style.css?./node_modules/css-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};\n\n//# sourceURL=webpack://capstone-2/./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/noSourceMaps.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/noSourceMaps.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function (i) {\n  return i[1];\n};\n\n//# sourceURL=webpack://capstone-2/./node_modules/css-loader/dist/runtime/noSourceMaps.js?");

/***/ }),

/***/ "./node_modules/lodash/dist/lodash.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/dist/lodash.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @license\n * Lo-Dash 1.3.1 (Custom Build) <http://lodash.com/>\n * Build: `lodash modern -o ./dist/lodash.js`\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.4.4 <http://underscorejs.org/>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.\n * Available under MIT license <http://lodash.com/license>\n */\n;(function(window) {\n\n  /** Used as a safe reference for `undefined` in pre ES5 environments */\n  var undefined;\n\n  /** Used to pool arrays and objects used internally */\n  var arrayPool = [],\n      objectPool = [];\n\n  /** Used to generate unique IDs */\n  var idCounter = 0;\n\n  /** Used internally to indicate various things */\n  var indicatorObject = {};\n\n  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */\n  var keyPrefix = +new Date + '';\n\n  /** Used as the size when optimizations are enabled for large arrays */\n  var largeArraySize = 75;\n\n  /** Used as the max size of the `arrayPool` and `objectPool` */\n  var maxPoolSize = 40;\n\n  /** Used to match empty string literals in compiled template source */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g;\n\n  /**\n   * Used to match ES6 template delimiters\n   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-7.8.6\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match regexp flags from their coerced string values */\n  var reFlags = /\\w*$/;\n\n  /** Used to match \"interpolate\" template delimiters */\n  var reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to detect functions containing a `this` reference */\n  var reThis = (reThis = /\\bthis\\b/) && reThis.test(runInContext) && reThis;\n\n  /** Used to detect and test whitespace */\n  var whitespace = (\n    // whitespace\n    ' \\t\\x0B\\f\\xA0\\ufeff' +\n\n    // line terminators\n    '\\n\\r\\u2028\\u2029' +\n\n    // unicode category \"Zs\" space separators\n    '\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000'\n  );\n\n  /** Used to match leading whitespace and zeros to be removed */\n  var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)');\n\n  /** Used to ensure capturing order of template delimiters */\n  var reNoMatch = /($^)/;\n\n  /** Used to match HTML characters */\n  var reUnescapedHtml = /[&<>\"']/g;\n\n  /** Used to match unescaped characters in compiled string literals */\n  var reUnescapedString = /['\\n\\r\\t\\u2028\\u2029\\\\]/g;\n\n  /** Used to assign default `context` object properties */\n  var contextProps = [\n    'Array', 'Boolean', 'Date', 'Function', 'Math', 'Number', 'Object',\n    'RegExp', 'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN',\n    'parseInt', 'setImmediate', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify */\n  var templateCounter = 0;\n\n  /** `Object#toString` result shortcuts */\n  var argsClass = '[object Arguments]',\n      arrayClass = '[object Array]',\n      boolClass = '[object Boolean]',\n      dateClass = '[object Date]',\n      errorClass = '[object Error]',\n      funcClass = '[object Function]',\n      numberClass = '[object Number]',\n      objectClass = '[object Object]',\n      regexpClass = '[object RegExp]',\n      stringClass = '[object String]';\n\n  /** Used to identify object classifications that `_.clone` supports */\n  var cloneableClasses = {};\n  cloneableClasses[funcClass] = false;\n  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =\n  cloneableClasses[boolClass] = cloneableClasses[dateClass] =\n  cloneableClasses[numberClass] = cloneableClasses[objectClass] =\n  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;\n\n  /** Used to determine if values are of the language type Object */\n  var objectTypes = {\n    'boolean': false,\n    'function': true,\n    'object': true,\n    'number': false,\n    'string': false,\n    'undefined': false\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\t': 't',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Detect free variable `exports` */\n  var freeExports = objectTypes[typeof exports] && exports;\n\n  /** Detect free variable `module` */\n  var freeModule = objectTypes[\"object\"] && module && module.exports == freeExports && module;\n\n  /** Detect free variable `global`, from Node.js or Browserified code, and use it as `window` */\n  var freeGlobal = objectTypes[typeof __webpack_require__.g] && __webpack_require__.g;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n    window = freeGlobal;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A basic implementation of `_.indexOf` without support for binary searches\n   * or `fromIndex` constraints.\n   *\n   * @private\n   * @param {Array} array The array to search.\n   * @param {Mixed} value The value to search for.\n   * @param {Number} [fromIndex=0] The index to search from.\n   * @returns {Number} Returns the index of the matched value or `-1`.\n   */\n  function basicIndexOf(array, value, fromIndex) {\n    var index = (fromIndex || 0) - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * An implementation of `_.contains` for cache objects that mimics the return\n   * signature of `_.indexOf` by returning `0` if the value is found, else `-1`.\n   *\n   * @private\n   * @param {Object} cache The cache object to inspect.\n   * @param {Mixed} value The value to search for.\n   * @returns {Number} Returns `0` if `value` is found, else `-1`.\n   */\n  function cacheIndexOf(cache, value) {\n    var type = typeof value;\n    cache = cache.cache;\n\n    if (type == 'boolean' || value == null) {\n      return cache[value];\n    }\n    if (type != 'number' && type != 'string') {\n      type = 'object';\n    }\n    var key = type == 'number' ? value : keyPrefix + value;\n    cache = cache[type] || (cache[type] = {});\n\n    return type == 'object'\n      ? (cache[key] && basicIndexOf(cache[key], value) > -1 ? 0 : -1)\n      : (cache[key] ? 0 : -1);\n  }\n\n  /**\n   * Adds a given `value` to the corresponding cache object.\n   *\n   * @private\n   * @param {Mixed} value The value to add to the cache.\n   */\n  function cachePush(value) {\n    var cache = this.cache,\n        type = typeof value;\n\n    if (type == 'boolean' || value == null) {\n      cache[value] = true;\n    } else {\n      if (type != 'number' && type != 'string') {\n        type = 'object';\n      }\n      var key = type == 'number' ? value : keyPrefix + value,\n          typeCache = cache[type] || (cache[type] = {});\n\n      if (type == 'object') {\n        if ((typeCache[key] || (typeCache[key] = [])).push(value) == this.array.length) {\n          cache[type] = false;\n        }\n      } else {\n        typeCache[key] = true;\n      }\n    }\n  }\n\n  /**\n   * Used by `_.max` and `_.min` as the default `callback` when a given\n   * `collection` is a string value.\n   *\n   * @private\n   * @param {String} value The character to inspect.\n   * @returns {Number} Returns the code unit of given character.\n   */\n  function charAtCallback(value) {\n    return value.charCodeAt(0);\n  }\n\n  /**\n   * Used by `sortBy` to compare transformed `collection` values, stable sorting\n   * them in ascending order.\n   *\n   * @private\n   * @param {Object} a The object to compare to `b`.\n   * @param {Object} b The object to compare to `a`.\n   * @returns {Number} Returns the sort order indicator of `1` or `-1`.\n   */\n  function compareAscending(a, b) {\n    var ai = a.index,\n        bi = b.index;\n\n    a = a.criteria;\n    b = b.criteria;\n\n    // ensure a stable sort in V8 and other engines\n    // http://code.google.com/p/v8/issues/detail?id=90\n    if (a !== b) {\n      if (a > b || typeof a == 'undefined') {\n        return 1;\n      }\n      if (a < b || typeof b == 'undefined') {\n        return -1;\n      }\n    }\n    return ai < bi ? -1 : 1;\n  }\n\n  /**\n   * Creates a cache object to optimize linear searches of large arrays.\n   *\n   * @private\n   * @param {Array} [array=[]] The array to search.\n   * @returns {Null|Object} Returns the cache object or `null` if caching should not be used.\n   */\n  function createCache(array) {\n    var index = -1,\n        length = array.length;\n\n    var cache = getObject();\n    cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;\n\n    var result = getObject();\n    result.array = array;\n    result.cache = cache;\n    result.push = cachePush;\n\n    while (++index < length) {\n      result.push(array[index]);\n    }\n    return cache.object === false\n      ? (releaseObject(result), null)\n      : result;\n  }\n\n  /**\n   * Used by `template` to escape characters for inclusion in compiled\n   * string literals.\n   *\n   * @private\n   * @param {String} match The matched character to escape.\n   * @returns {String} Returns the escaped character.\n   */\n  function escapeStringChar(match) {\n    return '\\\\' + stringEscapes[match];\n  }\n\n  /**\n   * Gets an array from the array pool or creates a new one if the pool is empty.\n   *\n   * @private\n   * @returns {Array} The array from the pool.\n   */\n  function getArray() {\n    return arrayPool.pop() || [];\n  }\n\n  /**\n   * Gets an object from the object pool or creates a new one if the pool is empty.\n   *\n   * @private\n   * @returns {Object} The object from the pool.\n   */\n  function getObject() {\n    return objectPool.pop() || {\n      'array': null,\n      'cache': null,\n      'criteria': null,\n      'false': false,\n      'index': 0,\n      'leading': false,\n      'maxWait': 0,\n      'null': false,\n      'number': null,\n      'object': null,\n      'push': null,\n      'string': null,\n      'trailing': false,\n      'true': false,\n      'undefined': false,\n      'value': null\n    };\n  }\n\n  /**\n   * A no-operation function.\n   *\n   * @private\n   */\n  function noop() {\n    // no operation performed\n  }\n\n  /**\n   * Releases the given `array` back to the array pool.\n   *\n   * @private\n   * @param {Array} [array] The array to release.\n   */\n  function releaseArray(array) {\n    array.length = 0;\n    if (arrayPool.length < maxPoolSize) {\n      arrayPool.push(array);\n    }\n  }\n\n  /**\n   * Releases the given `object` back to the object pool.\n   *\n   * @private\n   * @param {Object} [object] The object to release.\n   */\n  function releaseObject(object) {\n    var cache = object.cache;\n    if (cache) {\n      releaseObject(cache);\n    }\n    object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;\n    if (objectPool.length < maxPoolSize) {\n      objectPool.push(object);\n    }\n  }\n\n  /**\n   * Slices the `collection` from the `start` index up to, but not including,\n   * the `end` index.\n   *\n   * Note: This function is used, instead of `Array#slice`, to support node lists\n   * in IE < 9 and to ensure dense arrays are returned.\n   *\n   * @private\n   * @param {Array|Object|String} collection The collection to slice.\n   * @param {Number} start The start index.\n   * @param {Number} end The end index.\n   * @returns {Array} Returns the new array.\n   */\n  function slice(array, start, end) {\n    start || (start = 0);\n    if (typeof end == 'undefined') {\n      end = array ? array.length : 0;\n    }\n    var index = -1,\n        length = end - start || 0,\n        result = Array(length < 0 ? 0 : length);\n\n    while (++index < length) {\n      result[index] = array[start + index];\n    }\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new `lodash` function using the given `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Object} [context=window] The context object.\n   * @returns {Function} Returns the `lodash` function.\n   */\n  function runInContext(context) {\n    // Avoid issues with some ES3 environments that attempt to use values, named\n    // after built-in constructors like `Object`, for the creation of literals.\n    // ES5 clears this up by stating that literals must use built-in constructors.\n    // See http://es5.github.com/#x11.1.5.\n    context = context ? _.defaults(window.Object(), context, _.pick(window, contextProps)) : window;\n\n    /** Native constructor references */\n    var Array = context.Array,\n        Boolean = context.Boolean,\n        Date = context.Date,\n        Function = context.Function,\n        Math = context.Math,\n        Number = context.Number,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /**\n     * Used for `Array` method references.\n     *\n     * Normally `Array.prototype` would suffice, however, using an array literal\n     * avoids issues in Narwhal.\n     */\n    var arrayRef = [];\n\n    /** Used for native method references */\n    var objectProto = Object.prototype,\n        stringProto = String.prototype;\n\n    /** Used to restore the original `_` reference in `noConflict` */\n    var oldDash = context._;\n\n    /** Used to detect if a method is native */\n    var reNative = RegExp('^' +\n      String(objectProto.valueOf)\n        .replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n        .replace(/valueOf|for [^\\]]+/g, '.+?') + '$'\n    );\n\n    /** Native method shortcuts */\n    var ceil = Math.ceil,\n        clearTimeout = context.clearTimeout,\n        concat = arrayRef.concat,\n        floor = Math.floor,\n        fnToString = Function.prototype.toString,\n        getPrototypeOf = reNative.test(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,\n        hasOwnProperty = objectProto.hasOwnProperty,\n        push = arrayRef.push,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        setImmediate = context.setImmediate,\n        setTimeout = context.setTimeout,\n        toString = objectProto.toString;\n\n    /* Native method shortcuts for methods with the same name as other `lodash` methods */\n    var nativeBind = reNative.test(nativeBind = toString.bind) && nativeBind,\n        nativeCreate = reNative.test(nativeCreate =  Object.create) && nativeCreate,\n        nativeIsArray = reNative.test(nativeIsArray = Array.isArray) && nativeIsArray,\n        nativeIsFinite = context.isFinite,\n        nativeIsNaN = context.isNaN,\n        nativeKeys = reNative.test(nativeKeys = Object.keys) && nativeKeys,\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeSlice = arrayRef.slice;\n\n    /** Detect various environments */\n    var isIeOpera = reNative.test(context.attachEvent),\n        isV8 = nativeBind && !/\\n|true/.test(nativeBind + isIeOpera);\n\n    /** Used to lookup a built-in constructor by [[Class]] */\n    var ctorByClass = {};\n    ctorByClass[arrayClass] = Array;\n    ctorByClass[boolClass] = Boolean;\n    ctorByClass[dateClass] = Date;\n    ctorByClass[funcClass] = Function;\n    ctorByClass[objectClass] = Object;\n    ctorByClass[numberClass] = Number;\n    ctorByClass[regexpClass] = RegExp;\n    ctorByClass[stringClass] = String;\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object, which wraps the given `value`, to enable method\n     * chaining.\n     *\n     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:\n     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,\n     * and `unshift`\n     *\n     * Chaining is supported in custom builds as long as the `value` method is\n     * implicitly or explicitly included in the build.\n     *\n     * The chainable wrapper functions are:\n     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,\n     * `compose`, `concat`, `countBy`, `createCallback`, `debounce`, `defaults`,\n     * `defer`, `delay`, `difference`, `filter`, `flatten`, `forEach`, `forIn`,\n     * `forOwn`, `functions`, `groupBy`, `initial`, `intersection`, `invert`,\n     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,\n     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `push`, `range`,\n     * `reject`, `rest`, `reverse`, `shuffle`, `slice`, `sort`, `sortBy`, `splice`,\n     * `tap`, `throttle`, `times`, `toArray`, `transform`, `union`, `uniq`, `unshift`,\n     * `unzip`, `values`, `where`, `without`, `wrap`, and `zip`\n     *\n     * The non-chainable wrapper functions are:\n     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `has`,\n     * `identity`, `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`,\n     * `isElement`, `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`,\n     * `isNull`, `isNumber`, `isObject`, `isPlainObject`, `isRegExp`, `isString`,\n     * `isUndefined`, `join`, `lastIndexOf`, `mixin`, `noConflict`, `parseInt`,\n     * `pop`, `random`, `reduce`, `reduceRight`, `result`, `shift`, `size`, `some`,\n     * `sortedIndex`, `runInContext`, `template`, `unescape`, `uniqueId`, and `value`\n     *\n     * The wrapper functions `first` and `last` return wrapped values when `n` is\n     * passed, otherwise they return unwrapped values.\n     *\n     * @name _\n     * @constructor\n     * @alias chain\n     * @category Chaining\n     * @param {Mixed} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns a `lodash` instance.\n     * @example\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // returns an unwrapped value\n     * wrapped.reduce(function(sum, num) {\n     *   return sum + num;\n     * });\n     * // => 6\n     *\n     * // returns a wrapped value\n     * var squares = wrapped.map(function(num) {\n     *   return num * num;\n     * });\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor\n      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))\n       ? value\n       : new lodashWrapper(value);\n    }\n\n    /**\n     * A fast path for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {Mixed} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns a `lodash` instance.\n     */\n    function lodashWrapper(value) {\n      this.__wrapped__ = value;\n    }\n    // ensure `new lodashWrapper` is an instance of `lodash`\n    lodashWrapper.prototype = lodash.prototype;\n\n    /**\n     * An object used to flag environments features.\n     *\n     * @static\n     * @memberOf _\n     * @type Object\n     */\n    var support = lodash.support = {};\n\n    /**\n     * Detect if `Function#bind` exists and is inferred to be fast (all but V8).\n     *\n     * @memberOf _.support\n     * @type Boolean\n     */\n    support.fastBind = nativeBind && !isV8;\n\n    /**\n     * By default, the template delimiters used by Lo-Dash are similar to those in\n     * embedded Ruby (ERB). Change the following template settings to use alternative\n     * delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type Object\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'escape': /<%-([\\s\\S]+?)%>/g,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'evaluate': /<%([\\s\\S]+?)%>/g,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type String\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type Object\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type Function\n         */\n        '_': lodash\n      }\n    };\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates a function that, when called, invokes `func` with the `this` binding\n     * of `thisArg` and prepends any `partialArgs` to the arguments passed to the\n     * bound function.\n     *\n     * @private\n     * @param {Function|String} func The function to bind or the method name.\n     * @param {Mixed} [thisArg] The `this` binding of `func`.\n     * @param {Array} partialArgs An array of arguments to be partially applied.\n     * @param {Object} [idicator] Used to indicate binding by key or partially\n     *  applying arguments from the right.\n     * @returns {Function} Returns the new bound function.\n     */\n    function createBound(func, thisArg, partialArgs, indicator) {\n      var isFunc = isFunction(func),\n          isPartial = !partialArgs,\n          key = thisArg;\n\n      // juggle arguments\n      if (isPartial) {\n        var rightIndicator = indicator;\n        partialArgs = thisArg;\n      }\n      else if (!isFunc) {\n        if (!indicator) {\n          throw new TypeError;\n        }\n        thisArg = func;\n      }\n\n      function bound() {\n        // `Function#bind` spec\n        // http://es5.github.com/#x15.3.4.5\n        var args = arguments,\n            thisBinding = isPartial ? this : thisArg;\n\n        if (!isFunc) {\n          func = thisArg[key];\n        }\n        if (partialArgs.length) {\n          args = args.length\n            ? (args = nativeSlice.call(args), rightIndicator ? args.concat(partialArgs) : partialArgs.concat(args))\n            : partialArgs;\n        }\n        if (this instanceof bound) {\n          // ensure `new bound` is an instance of `func`\n          thisBinding = createObject(func.prototype);\n\n          // mimic the constructor's `return` behavior\n          // http://es5.github.com/#x13.2.2\n          var result = func.apply(thisBinding, args);\n          return isObject(result) ? result : thisBinding;\n        }\n        return func.apply(thisBinding, args);\n      }\n      return bound;\n    }\n\n    /**\n     * Creates a new object with the specified `prototype`.\n     *\n     * @private\n     * @param {Object} prototype The prototype object.\n     * @returns {Object} Returns the new object.\n     */\n    function createObject(prototype) {\n      return isObject(prototype) ? nativeCreate(prototype) : {};\n    }\n\n    /**\n     * Used by `escape` to convert characters to HTML entities.\n     *\n     * @private\n     * @param {String} match The matched character to escape.\n     * @returns {String} Returns the escaped character.\n     */\n    function escapeHtmlChar(match) {\n      return htmlEscapes[match];\n    }\n\n    /**\n     * Gets the appropriate \"indexOf\" function. If the `_.indexOf` method is\n     * customized, this method returns the custom method, otherwise it returns\n     * the `basicIndexOf` function.\n     *\n     * @private\n     * @returns {Function} Returns the \"indexOf\" function.\n     */\n    function getIndexOf(array, value, fromIndex) {\n      var result = (result = lodash.indexOf) === indexOf ? basicIndexOf : result;\n      return result;\n    }\n\n    /**\n     * Creates a function that juggles arguments, allowing argument overloading\n     * for `_.flatten` and `_.uniq`, before passing them to the given `func`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @returns {Function} Returns the new function.\n     */\n    function overloadWrapper(func) {\n      return function(array, flag, callback, thisArg) {\n        // juggle arguments\n        if (typeof flag != 'boolean' && flag != null) {\n          thisArg = callback;\n          callback = !(thisArg && thisArg[flag] === array) ? flag : undefined;\n          flag = false;\n        }\n        if (callback != null) {\n          callback = lodash.createCallback(callback, thisArg);\n        }\n        return func(array, flag, callback, thisArg);\n      };\n    }\n\n    /**\n     * A fallback implementation of `isPlainObject` which checks if a given `value`\n     * is an object created by the `Object` constructor, assuming objects created\n     * by the `Object` constructor have no inherited enumerable properties and that\n     * there are no `Object.prototype` extensions.\n     *\n     * @private\n     * @param {Mixed} value The value to check.\n     * @returns {Boolean} Returns `true`, if `value` is a plain object, else `false`.\n     */\n    function shimIsPlainObject(value) {\n      var ctor,\n          result;\n\n      // avoid non Object objects, `arguments` objects, and DOM elements\n      if (!(value && toString.call(value) == objectClass) ||\n          (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor))) {\n        return false;\n      }\n      // In most environments an object's own properties are iterated before\n      // its inherited properties. If the last iterated property is an object's\n      // own property then there are no inherited enumerable properties.\n      forIn(value, function(value, key) {\n        result = key;\n      });\n      return result === undefined || hasOwnProperty.call(value, result);\n    }\n\n    /**\n     * Used by `unescape` to convert HTML entities to characters.\n     *\n     * @private\n     * @param {String} match The matched character to unescape.\n     * @returns {String} Returns the unescaped character.\n     */\n    function unescapeHtmlChar(match) {\n      return htmlUnescapes[match];\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Checks if `value` is an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Mixed} value The value to check.\n     * @returns {Boolean} Returns `true`, if the `value` is an `arguments` object, else `false`.\n     * @example\n     *\n     * (function() { return _.isArguments(arguments); })(1, 2, 3);\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    function isArguments(value) {\n      return toString.call(value) == argsClass;\n    }\n\n    /**\n     * Checks if `value` is an array.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Mixed} value The value to check.\n     * @returns {Boolean} Returns `true`, if the `value` is an array, else `false`.\n     * @example\n     *\n     * (function() { return _.isArray(arguments); })();\n     * // => false\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     */\n    var isArray = nativeIsArray;\n\n    /**\n     * A fallback implementation of `Object.keys` which produces an array of the\n     * given object's own enumerable property names.\n     *\n     * @private\n     * @type Function\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns a new array of property names.\n     */\n    var shimKeys = function (object) {\n      var index, iterable = object, result = [];\n      if (!iterable) return result;\n      if (!(objectTypes[typeof object])) return result;    \n        for (index in iterable) {\n          if (hasOwnProperty.call(iterable, index)) {\n            result.push(index);    \n          }\n        }    \n      return result\n    };\n\n    /**\n     * Creates an array composed of the own enumerable property names of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns a new array of property names.\n     * @example\n     *\n     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });\n     * // => ['one', 'two', 'three'] (order is not guaranteed)\n     */\n    var keys = !nativeKeys ? shimKeys : function(object) {\n      if (!isObject(object)) {\n        return [];\n      }\n      return nativeKeys(object);\n    };\n\n    /**\n     * Used to convert characters to HTML entities:\n     *\n     * Though the `>` character is escaped for symmetry, characters like `>` and `/`\n     * don't require escaping in HTML and have no special meaning unless they're part\n     * of a tag or an unquoted attribute value.\n     * http://mathiasbynens.be/notes/ambiguous-ampersands (under \"semi-related fun fact\")\n     */\n    var htmlEscapes = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;'\n    };\n\n    /** Used to convert HTML entities to characters */\n    var htmlUnescapes = invert(htmlEscapes);\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable properties of source object(s) to the destination\n     * object. Subsequent sources will overwrite property assignments of previous\n     * sources. If a `callback` function is passed, it will be executed to produce\n     * the assigned values. The `callback` is bound to `thisArg` and invoked with\n     * two arguments; (objectValue, sourceValue).\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @alias extend\n     * @category Objects\n     * @param {Object} object The destination object.\n     * @param {Object} [source1, source2, ...] The source objects.\n     * @param {Function} [callback] The function to customize assigning values.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns the destination object.\n     * @example\n     *\n     * _.assign({ 'name': 'moe' }, { 'age': 40 });\n     * // => { 'name': 'moe', 'age': 40 }\n     *\n     * var defaults = _.partialRight(_.assign, function(a, b) {\n     *   return typeof a == 'undefined' ? b : a;\n     * });\n     *\n     * var food = { 'name': 'apple' };\n     * defaults(food, { 'name': 'banana', 'type': 'fruit' });\n     * // => { 'name': 'apple', 'type': 'fruit' }\n     */\n    var assign = function (object, source, guard) {\n      var index, iterable = object, result = iterable;\n      if (!iterable) return result;\n      var args = arguments,\n          argsIndex = 0,\n          argsLength = typeof guard == 'number' ? 2 : args.length;\n      if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {\n        var callback = lodash.createCallback(args[--argsLength - 1], args[argsLength--], 2);\n      } else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {\n        callback = args[--argsLength];\n      }\n      while (++argsIndex < argsLength) {\n        iterable = args[argsIndex];\n        if (iterable && objectTypes[typeof iterable]) {    \n        var ownIndex = -1,\n            ownProps = objectTypes[typeof iterable] && keys(iterable),\n            length = ownProps ? ownProps.length : 0;\n\n        while (++ownIndex < length) {\n          index = ownProps[ownIndex];\n          result[index] = callback ? callback(result[index], iterable[index]) : iterable[index];    \n        }    \n        }\n      }\n      return result\n    };\n\n    /**\n     * Creates a clone of `value`. If `deep` is `true`, nested objects will also\n     * be cloned, otherwise they will be assigned by reference. If a `callback`\n     * function is passed, it will be executed to produce the cloned values. If\n     * `callback` returns `undefined`, cloning will be handled by the method instead.\n     * The `callback` is bound to `thisArg` and invoked with one argument; (value).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Mixed} value The value to clone.\n     * @param {Boolean} [deep=false] A flag to indicate a deep clone.\n     * @param {Function} [callback] The function to customize cloning values.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @param- {Array} [stackA=[]] Tracks traversed source objects.\n     * @param- {Array} [stackB=[]] Associates clones with source counterparts.\n     * @returns {Mixed} Returns the cloned `value`.\n     * @example\n     *\n     * var stooges = [\n     *   { 'name': 'moe', 'age': 40 },\n     *   { 'name': 'larry', 'age': 50 }\n     * ];\n     *\n     * var shallow = _.clone(stooges);\n     * shallow[0] === stooges[0];\n     * // => true\n     *\n     * var deep = _.clone(stooges, true);\n     * deep[0] === stooges[0];\n     * // => false\n     *\n     * _.mixin({\n     *   'clone': _.partialRight(_.clone, function(value) {\n     *     return _.isElement(value) ? value.cloneNode(false) : undefined;\n     *   })\n     * });\n     *\n     * var clone = _.clone(document.body);\n     * clone.childNodes.length;\n     * // => 0\n     */\n    function clone(value, deep, callback, thisArg, stackA, stackB) {\n      var result = value;\n\n      // allows working with \"Collections\" methods without using their `callback`\n      // argument, `index|key`, for this method's `callback`\n      if (typeof deep != 'boolean' && deep != null) {\n        thisArg = callback;\n        callback = deep;\n        deep = false;\n      }\n      if (typeof callback == 'function') {\n        callback = (typeof thisArg == 'undefined')\n          ? callback\n          : lodash.createCallback(callback, thisArg, 1);\n\n        result = callback(result);\n        if (typeof result != 'undefined') {\n          return result;\n        }\n        result = value;\n      }\n      // inspect [[Class]]\n      var isObj = isObject(result);\n      if (isObj) {\n        var className = toString.call(result);\n        if (!cloneableClasses[className]) {\n          return result;\n        }\n        var isArr = isArray(result);\n      }\n      // shallow clone\n      if (!isObj || !deep) {\n        return isObj\n          ? (isArr ? slice(result) : assign({}, result))\n          : result;\n      }\n      var ctor = ctorByClass[className];\n      switch (className) {\n        case boolClass:\n        case dateClass:\n          return new ctor(+result);\n\n        case numberClass:\n        case stringClass:\n          return new ctor(result);\n\n        case regexpClass:\n          return ctor(result.source, reFlags.exec(result));\n      }\n      // check for circular references and return corresponding clone\n      var initedStack = !stackA;\n      stackA || (stackA = getArray());\n      stackB || (stackB = getArray());\n\n      var length = stackA.length;\n      while (length--) {\n        if (stackA[length] == value) {\n          return stackB[length];\n        }\n      }\n      // init cloned object\n      result = isArr ? ctor(result.length) : {};\n\n      // add array properties assigned by `RegExp#exec`\n      if (isArr) {\n        if (hasOwnProperty.call(value, 'index')) {\n          result.index = value.index;\n        }\n        if (hasOwnProperty.call(value, 'input')) {\n          result.input = value.input;\n        }\n      }\n      // add the source value to the stack of traversed objects\n      // and associate it with its clone\n      stackA.push(value);\n      stackB.push(result);\n\n      // recursively populate clone (susceptible to call stack limits)\n      (isArr ? forEach : forOwn)(value, function(objValue, key) {\n        result[key] = clone(objValue, deep, callback, undefined, stackA, stackB);\n      });\n\n      if (initedStack) {\n        releaseArray(stackA);\n        releaseArray(stackB);\n      }\n      return result;\n    }\n\n    /**\n     * Creates a deep clone of `value`. If a `callback` function is passed,\n     * it will be executed to produce the cloned values. If `callback` returns\n     * `undefined`, cloning will be handled by the method instead. The `callback`\n     * is bound to `thisArg` and invoked with one argument; (value).\n     *\n     * Note: This method is loosely based on the structured clone algorithm. Functions\n     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and\n     * objects created by constructors other than `Object` are cloned to plain `Object` objects.\n     * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Mixed} value The value to deep clone.\n     * @param {Function} [callback] The function to customize cloning values.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Mixed} Returns the deep cloned `value`.\n     * @example\n     *\n     * var stooges = [\n     *   { 'name': 'moe', 'age': 40 },\n     *   { 'name': 'larry', 'age': 50 }\n     * ];\n     *\n     * var deep = _.cloneDeep(stooges);\n     * deep[0] === stooges[0];\n     * // => false\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'node': element\n     * };\n     *\n     * var clone = _.cloneDeep(view, function(value) {\n     *   return _.isElement(value) ? value.cloneNode(true) : undefined;\n     * });\n     *\n     * clone.node == view.node;\n     * // => false\n     */\n    function cloneDeep(value, callback, thisArg) {\n      return clone(value, true, callback, thisArg);\n    }\n\n    /**\n     * Assigns own enumerable properties of source object(s) to the destination\n     * object for all destination properties that resolve to `undefined`. Once a\n     * property is set, additional defaults of the same property will be ignored.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Objects\n     * @param {Object} object The destination object.\n     * @param {Object} [source1, source2, ...] The source objects.\n     * @param- {Object} [guard] Allows working with `_.reduce` without using its\n     *  callback's `key` and `object` arguments as sources.\n     * @returns {Object} Returns the destination object.\n     * @example\n     *\n     * var food = { 'name': 'apple' };\n     * _.defaults(food, { 'name': 'banana', 'type': 'fruit' });\n     * // => { 'name': 'apple', 'type': 'fruit' }\n     */\n    var defaults = function (object, source, guard) {\n      var index, iterable = object, result = iterable;\n      if (!iterable) return result;\n      var args = arguments,\n          argsIndex = 0,\n          argsLength = typeof guard == 'number' ? 2 : args.length;\n      while (++argsIndex < argsLength) {\n        iterable = args[argsIndex];\n        if (iterable && objectTypes[typeof iterable]) {    \n        var ownIndex = -1,\n            ownProps = objectTypes[typeof iterable] && keys(iterable),\n            length = ownProps ? ownProps.length : 0;\n\n        while (++ownIndex < length) {\n          index = ownProps[ownIndex];\n          if (typeof result[index] == 'undefined') result[index] = iterable[index];    \n        }    \n        }\n      }\n      return result\n    };\n\n    /**\n     * This method is similar to `_.find`, except that it returns the key of the\n     * element that passes the callback check, instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to search.\n     * @param {Function|Object|String} [callback=identity] The function called per\n     *  iteration. If a property name or object is passed, it will be used to create\n     *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Mixed} Returns the key of the found element, else `undefined`.\n     * @example\n     *\n     * _.findKey({ 'a': 1, 'b': 2, 'c': 3, 'd': 4 }, function(num) {\n     *   return num % 2 == 0;\n     * });\n     * // => 'b'\n     */\n    function findKey(object, callback, thisArg) {\n      var result;\n      callback = lodash.createCallback(callback, thisArg);\n      forOwn(object, function(value, key, object) {\n        if (callback(value, key, object)) {\n          result = key;\n          return false;\n        }\n      });\n      return result;\n    }\n\n    /**\n     * Iterates over `object`'s own and inherited enumerable properties, executing\n     * the `callback` for each property. The `callback` is bound to `thisArg` and\n     * invoked with three arguments; (value, key, object). Callbacks may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Objects\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function Dog(name) {\n     *   this.name = name;\n     * }\n     *\n     * Dog.prototype.bark = function() {\n     *   alert('Woof, woof!');\n     * };\n     *\n     * _.forIn(new Dog('Dagny'), function(value, key) {\n     *   alert(key);\n     * });\n     * // => alerts 'name' and 'bark' (order is not guaranteed)\n     */\n    var forIn = function (collection, callback, thisArg) {\n      var index, iterable = collection, result = iterable;\n      if (!iterable) return result;\n      if (!objectTypes[typeof iterable]) return result;\n      callback = callback && typeof thisArg == 'undefined' ? callback : lodash.createCallback(callback, thisArg);    \n        for (index in iterable) {\n          if (callback(iterable[index], index, collection) === false) return result;    \n        }    \n      return result\n    };\n\n    /**\n     * Iterates over an object's own enumerable properties, executing the `callback`\n     * for each property. The `callback` is bound to `thisArg` and invoked with three\n     * arguments; (value, key, object). Callbacks may exit iteration early by explicitly\n     * returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Objects\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {\n     *   alert(key);\n     * });\n     * // => alerts '0', '1', and 'length' (order is not guaranteed)\n     */\n    var forOwn = function (collection, callback, thisArg) {\n      var index, iterable = collection, result = iterable;\n      if (!iterable) return result;\n      if (!objectTypes[typeof iterable]) return result;\n      callback = callback && typeof thisArg == 'undefined' ? callback : lodash.createCallback(callback, thisArg);    \n        var ownIndex = -1,\n            ownProps = objectTypes[typeof iterable] && keys(iterable),\n            length = ownProps ? ownProps.length : 0;\n\n        while (++ownIndex < length) {\n          index = ownProps[ownIndex];\n          if (callback(iterable[index], index, collection) === false) return result;    \n        }    \n      return result\n    };\n\n    /**\n     * Creates a sorted array of all enumerable properties, own and inherited,\n     * of `object` that have function values.\n     *\n     * @static\n     * @memberOf _\n     * @alias methods\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns a new array of property names that have function values.\n     * @example\n     *\n     * _.functions(_);\n     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]\n     */\n    function functions(object) {\n      var result = [];\n      forIn(object, function(value, key) {\n        if (isFunction(value)) {\n          result.push(key);\n        }\n      });\n      return result.sort();\n    }\n\n    /**\n     * Checks if the specified object `property` exists and is a direct property,\n     * instead of an inherited property.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to check.\n     * @param {String} property The property to check for.\n     * @returns {Boolean} Returns `true` if key is a direct property, else `false`.\n     * @example\n     *\n     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');\n     * // => true\n     */\n    function has(object, property) {\n      return object ? hasOwnProperty.call(object, property) : false;\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of the given `object`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the created inverted object.\n     * @example\n     *\n     *  _.invert({ 'first': 'moe', 'second': 'larry' });\n     * // => { 'moe': 'first', 'larry': 'second' }\n     */\n    function invert(object) {\n      var index = -1,\n          props = keys(object),\n          length = props.length,\n          result = {};\n\n      while (++index < length) {\n        var key = props[index];\n        result[object[key]] = key;\n      }\n      return result;\n    }\n\n    /**\n     * Checks if `value` is a boolean value.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Mixed} value The value to check.\n     * @returns {Boolean} Returns `true`, if the `value` is a boolean value, else `false`.\n     * @example\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false || toString.call(value) == boolClass;\n    }\n\n    /**\n     * Checks if `value` is a date.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Mixed} value The value to check.\n     * @returns {Boolean} Returns `true`, if the `value` is a date, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     */\n    function isDate(value) {\n      return value ? (typeof value == 'object' && toString.call(value) == dateClass) : false;\n    }\n\n    /**\n     * Checks if `value` is a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Mixed} value The value to check.\n     * @returns {Boolean} Returns `true`, if the `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     */\n    function isElement(value) {\n      return value ? value.nodeType === 1 : false;\n    }\n\n    /**\n     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a\n     * length of `0` and objects with no own enumerable properties are considered\n     * \"empty\".\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Array|Object|String} value The value to inspect.\n     * @returns {Boolean} Returns `true`, if the `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({});\n     * // => true\n     *\n     * _.isEmpty('');\n     * // => true\n     */\n    function isEmpty(value) {\n      var result = true;\n      if (!value) {\n        return result;\n      }\n      var className = toString.call(value),\n          length = value.length;\n\n      if ((className == arrayClass || className == stringClass || className == argsClass ) ||\n          (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {\n        return !length;\n      }\n      forOwn(value, function() {\n        return (result = false);\n      });\n      return result;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent to each other. If `callback` is passed, it will be executed to\n     * compare values. If `callback` returns `undefined`, comparisons will be handled\n     * by the method instead. The `callback` is bound to `thisArg` and invoked with\n     * two arguments; (a, b).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Mixed} a The value to compare.\n     * @param {Mixed} b The other value to compare.\n     * @param {Function} [callback] The function to customize comparing values.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @param- {Array} [stackA=[]] Tracks traversed `a` objects.\n     * @param- {Array} [stackB=[]] Tracks traversed `b` objects.\n     * @returns {Boolean} Returns `true`, if the values are equivalent, else `false`.\n     * @example\n     *\n     * var moe = { 'name': 'moe', 'age': 40 };\n     * var copy = { 'name': 'moe', 'age': 40 };\n     *\n     * moe == copy;\n     * // => false\n     *\n     * _.isEqual(moe, copy);\n     * // => true\n     *\n     * var words = ['hello', 'goodbye'];\n     * var otherWords = ['hi', 'goodbye'];\n     *\n     * _.isEqual(words, otherWords, function(a, b) {\n     *   var reGreet = /^(?:hello|hi)$/i,\n     *       aGreet = _.isString(a) && reGreet.test(a),\n     *       bGreet = _.isString(b) && reGreet.test(b);\n     *\n     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;\n     * });\n     * // => true\n     */\n    function isEqual(a, b, callback, thisArg, stackA, stackB) {\n      // used to indicate that when comparing objects, `a` has at least the properties of `b`\n      var whereIndicator = callback === indicatorObject;\n      if (typeof callback == 'function' && !whereIndicator) {\n        callback = lodash.createCallback(callback, thisArg, 2);\n        var result = callback(a, b);\n        if (typeof result != 'undefined') {\n          return !!result;\n        }\n      }\n      // exit early for identical values\n      if (a === b) {\n        // treat `+0` vs. `-0` as not equal\n        return a !== 0 || (1 / a == 1 / b);\n      }\n      var type = typeof a,\n          otherType = typeof b;\n\n      // exit early for unlike primitive values\n      if (a === a &&\n          (!a || (type != 'function' && type != 'object')) &&\n          (!b || (otherType != 'function' && otherType != 'object'))) {\n        return false;\n      }\n      // exit early for `null` and `undefined`, avoiding ES3's Function#call behavior\n      // http://es5.github.com/#x15.3.4.4\n      if (a == null || b == null) {\n        return a === b;\n      }\n      // compare [[Class]] names\n      var className = toString.call(a),\n          otherClass = toString.call(b);\n\n      if (className == argsClass) {\n        className = objectClass;\n      }\n      if (otherClass == argsClass) {\n        otherClass = objectClass;\n      }\n      if (className != otherClass) {\n        return false;\n      }\n      switch (className) {\n        case boolClass:\n        case dateClass:\n          // coerce dates and booleans to numbers, dates to milliseconds and booleans\n          // to `1` or `0`, treating invalid dates coerced to `NaN` as not equal\n          return +a == +b;\n\n        case numberClass:\n          // treat `NaN` vs. `NaN` as equal\n          return (a != +a)\n            ? b != +b\n            // but treat `+0` vs. `-0` as not equal\n            : (a == 0 ? (1 / a == 1 / b) : a == +b);\n\n        case regexpClass:\n        case stringClass:\n          // coerce regexes to strings (http://es5.github.com/#x15.10.6.4)\n          // treat string primitives and their corresponding object instances as equal\n          return a == String(b);\n      }\n      var isArr = className == arrayClass;\n      if (!isArr) {\n        // unwrap any `lodash` wrapped values\n        if (hasOwnProperty.call(a, '__wrapped__ ') || hasOwnProperty.call(b, '__wrapped__')) {\n          return isEqual(a.__wrapped__ || a, b.__wrapped__ || b, callback, thisArg, stackA, stackB);\n        }\n        // exit for functions and DOM nodes\n        if (className != objectClass) {\n          return false;\n        }\n        // in older versions of Opera, `arguments` objects have `Array` constructors\n        var ctorA = a.constructor,\n            ctorB = b.constructor;\n\n        // non `Object` object instances with different constructors are not equal\n        if (ctorA != ctorB && !(\n              isFunction(ctorA) && ctorA instanceof ctorA &&\n              isFunction(ctorB) && ctorB instanceof ctorB\n            )) {\n          return false;\n        }\n      }\n      // assume cyclic structures are equal\n      // the algorithm for detecting cyclic structures is adapted from ES 5.1\n      // section 15.12.3, abstract operation `JO` (http://es5.github.com/#x15.12.3)\n      var initedStack = !stackA;\n      stackA || (stackA = getArray());\n      stackB || (stackB = getArray());\n\n      var length = stackA.length;\n      while (length--) {\n        if (stackA[length] == a) {\n          return stackB[length] == b;\n        }\n      }\n      var size = 0;\n      result = true;\n\n      // add `a` and `b` to the stack of traversed objects\n      stackA.push(a);\n      stackB.push(b);\n\n      // recursively compare objects and arrays (susceptible to call stack limits)\n      if (isArr) {\n        length = a.length;\n        size = b.length;\n\n        // compare lengths to determine if a deep comparison is necessary\n        result = size == a.length;\n        if (!result && !whereIndicator) {\n          return result;\n        }\n        // deep compare the contents, ignoring non-numeric properties\n        while (size--) {\n          var index = length,\n              value = b[size];\n\n          if (whereIndicator) {\n            while (index--) {\n              if ((result = isEqual(a[index], value, callback, thisArg, stackA, stackB))) {\n                break;\n              }\n            }\n          } else if (!(result = isEqual(a[size], value, callback, thisArg, stackA, stackB))) {\n            break;\n          }\n        }\n        return result;\n      }\n      // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`\n      // which, in this case, is more costly\n      forIn(b, function(value, key, b) {\n        if (hasOwnProperty.call(b, key)) {\n          // count the number of properties.\n          size++;\n          // deep compare each property value.\n          return (result = hasOwnProperty.call(a, key) && isEqual(a[key], value, callback, thisArg, stackA, stackB));\n        }\n      });\n\n      if (result && !whereIndicator) {\n        // ensure both objects have the same number of properties\n        forIn(a, function(value, key, a) {\n          if (hasOwnProperty.call(a, key)) {\n            // `size` will be `-1` if `a` has more properties than `b`\n            return (result = --size > -1);\n          }\n        });\n      }\n      if (initedStack) {\n        releaseArray(stackA);\n        releaseArray(stackB);\n      }\n      return result;\n    }\n\n    /**\n     * Checks if `value` is, or can be coerced to, a finite number.\n     *\n     * Note: This is not the same as native `isFinite`, which will return true for\n     * booleans and empty strings. See http://es5.github.com/#x15.1.2.5.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Mixed} value The value to check.\n     * @returns {Boolean} Returns `true`, if the `value` is finite, else `false`.\n     * @example\n     *\n     * _.isFinite(-101);\n     * // => true\n     *\n     * _.isFinite('10');\n     * // => true\n     *\n     * _.isFinite(true);\n     * // => false\n     *\n     * _.isFinite('');\n     * // => false\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     */\n    function isFinite(value) {\n      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));\n    }\n\n    /**\n     * Checks if `value` is a function.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Mixed} value The value to check.\n     * @returns {Boolean} Returns `true`, if the `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     */\n    function isFunction(value) {\n      return typeof value == 'function';\n    }\n\n    /**\n     * Checks if `value` is the language type of Object.\n     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Mixed} value The value to check.\n     * @returns {Boolean} Returns `true`, if the `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(1);\n     * // => false\n     */\n    function isObject(value) {\n      // check if the value is the ECMAScript language type of Object\n      // http://es5.github.com/#x8\n      // and avoid a V8 bug\n      // http://code.google.com/p/v8/issues/detail?id=2291\n      return !!(value && objectTypes[typeof value]);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * Note: This is not the same as native `isNaN`, which will return `true` for\n     * `undefined` and other values. See http://es5.github.com/#x15.1.2.4.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Mixed} value The value to check.\n     * @returns {Boolean} Returns `true`, if the `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // `NaN` as a primitive is the only value that is not equal to itself\n      // (perform the [[Class]] check first to avoid errors with some host objects in IE)\n      return isNumber(value) && value != +value\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Mixed} value The value to check.\n     * @returns {Boolean} Returns `true`, if the `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(undefined);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is a number.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Mixed} value The value to check.\n     * @returns {Boolean} Returns `true`, if the `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(8.4 * 5);\n     * // => true\n     */\n    function isNumber(value) {\n      return typeof value == 'number' || toString.call(value) == numberClass;\n    }\n\n    /**\n     * Checks if a given `value` is an object created by the `Object` constructor.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Mixed} value The value to check.\n     * @returns {Boolean} Returns `true`, if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Stooge(name, age) {\n     *   this.name = name;\n     *   this.age = age;\n     * }\n     *\n     * _.isPlainObject(new Stooge('moe', 40));\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'name': 'moe', 'age': 40 });\n     * // => true\n     */\n    var isPlainObject = function(value) {\n      if (!(value && toString.call(value) == objectClass)) {\n        return false;\n      }\n      var valueOf = value.valueOf,\n          objProto = typeof valueOf == 'function' && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);\n\n      return objProto\n        ? (value == objProto || getPrototypeOf(value) == objProto)\n        : shimIsPlainObject(value);\n    };\n\n    /**\n     * Checks if `value` is a regular expression.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Mixed} value The value to check.\n     * @returns {Boolean} Returns `true`, if the `value` is a regular expression, else `false`.\n     * @example\n     *\n     * _.isRegExp(/moe/);\n     * // => true\n     */\n    function isRegExp(value) {\n      return value ? (typeof value == 'object' && toString.call(value) == regexpClass) : false;\n    }\n\n    /**\n     * Checks if `value` is a string.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Mixed} value The value to check.\n     * @returns {Boolean} Returns `true`, if the `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('moe');\n     * // => true\n     */\n    function isString(value) {\n      return typeof value == 'string' || toString.call(value) == stringClass;\n    }\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Mixed} value The value to check.\n     * @returns {Boolean} Returns `true`, if the `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     */\n    function isUndefined(value) {\n      return typeof value == 'undefined';\n    }\n\n    /**\n     * Recursively merges own enumerable properties of the source object(s), that\n     * don't resolve to `undefined`, into the destination object. Subsequent sources\n     * will overwrite property assignments of previous sources. If a `callback` function\n     * is passed, it will be executed to produce the merged values of the destination\n     * and source properties. If `callback` returns `undefined`, merging will be\n     * handled by the method instead. The `callback` is bound to `thisArg` and\n     * invoked with two arguments; (objectValue, sourceValue).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The destination object.\n     * @param {Object} [source1, source2, ...] The source objects.\n     * @param {Function} [callback] The function to customize merging properties.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @param- {Object} [deepIndicator] Indicates that `stackA` and `stackB` are\n     *  arrays of traversed objects, instead of source objects.\n     * @param- {Array} [stackA=[]] Tracks traversed source objects.\n     * @param- {Array} [stackB=[]] Associates values with source counterparts.\n     * @returns {Object} Returns the destination object.\n     * @example\n     *\n     * var names = {\n     *   'stooges': [\n     *     { 'name': 'moe' },\n     *     { 'name': 'larry' }\n     *   ]\n     * };\n     *\n     * var ages = {\n     *   'stooges': [\n     *     { 'age': 40 },\n     *     { 'age': 50 }\n     *   ]\n     * };\n     *\n     * _.merge(names, ages);\n     * // => { 'stooges': [{ 'name': 'moe', 'age': 40 }, { 'name': 'larry', 'age': 50 }] }\n     *\n     * var food = {\n     *   'fruits': ['apple'],\n     *   'vegetables': ['beet']\n     * };\n     *\n     * var otherFood = {\n     *   'fruits': ['banana'],\n     *   'vegetables': ['carrot']\n     * };\n     *\n     * _.merge(food, otherFood, function(a, b) {\n     *   return _.isArray(a) ? a.concat(b) : undefined;\n     * });\n     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }\n     */\n    function merge(object, source, deepIndicator) {\n      var args = arguments,\n          index = 0,\n          length = 2;\n\n      if (!isObject(object)) {\n        return object;\n      }\n      if (deepIndicator === indicatorObject) {\n        var callback = args[3],\n            stackA = args[4],\n            stackB = args[5];\n      } else {\n        var initedStack = true;\n        stackA = getArray();\n        stackB = getArray();\n\n        // allows working with `_.reduce` and `_.reduceRight` without\n        // using their `callback` arguments, `index|key` and `collection`\n        if (typeof deepIndicator != 'number') {\n          length = args.length;\n        }\n        if (length > 3 && typeof args[length - 2] == 'function') {\n          callback = lodash.createCallback(args[--length - 1], args[length--], 2);\n        } else if (length > 2 && typeof args[length - 1] == 'function') {\n          callback = args[--length];\n        }\n      }\n      while (++index < length) {\n        (isArray(args[index]) ? forEach : forOwn)(args[index], function(source, key) {\n          var found,\n              isArr,\n              result = source,\n              value = object[key];\n\n          if (source && ((isArr = isArray(source)) || isPlainObject(source))) {\n            // avoid merging previously merged cyclic sources\n            var stackLength = stackA.length;\n            while (stackLength--) {\n              if ((found = stackA[stackLength] == source)) {\n                value = stackB[stackLength];\n                break;\n              }\n            }\n            if (!found) {\n              var isShallow;\n              if (callback) {\n                result = callback(value, source);\n                if ((isShallow = typeof result != 'undefined')) {\n                  value = result;\n                }\n              }\n              if (!isShallow) {\n                value = isArr\n                  ? (isArray(value) ? value : [])\n                  : (isPlainObject(value) ? value : {});\n              }\n              // add `source` and associated `value` to the stack of traversed objects\n              stackA.push(source);\n              stackB.push(value);\n\n              // recursively merge objects and arrays (susceptible to call stack limits)\n              if (!isShallow) {\n                value = merge(value, source, indicatorObject, callback, stackA, stackB);\n              }\n            }\n          }\n          else {\n            if (callback) {\n              result = callback(value, source);\n              if (typeof result == 'undefined') {\n                result = source;\n              }\n            }\n            if (typeof result != 'undefined') {\n              value = result;\n            }\n          }\n          object[key] = value;\n        });\n      }\n\n      if (initedStack) {\n        releaseArray(stackA);\n        releaseArray(stackB);\n      }\n      return object;\n    }\n\n    /**\n     * Creates a shallow clone of `object` excluding the specified properties.\n     * Property names may be specified as individual arguments or as arrays of\n     * property names. If a `callback` function is passed, it will be executed\n     * for each property in the `object`, omitting the properties `callback`\n     * returns truthy for. The `callback` is bound to `thisArg` and invoked\n     * with three arguments; (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The source object.\n     * @param {Function|String} callback|[prop1, prop2, ...] The properties to omit\n     *  or the function called per iteration.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns an object without the omitted properties.\n     * @example\n     *\n     * _.omit({ 'name': 'moe', 'age': 40 }, 'age');\n     * // => { 'name': 'moe' }\n     *\n     * _.omit({ 'name': 'moe', 'age': 40 }, function(value) {\n     *   return typeof value == 'number';\n     * });\n     * // => { 'name': 'moe' }\n     */\n    function omit(object, callback, thisArg) {\n      var indexOf = getIndexOf(),\n          isFunc = typeof callback == 'function',\n          result = {};\n\n      if (isFunc) {\n        callback = lodash.createCallback(callback, thisArg);\n      } else {\n        var props = concat.apply(arrayRef, nativeSlice.call(arguments, 1));\n      }\n      forIn(object, function(value, key, object) {\n        if (isFunc\n              ? !callback(value, key, object)\n              : indexOf(props, key) < 0\n            ) {\n          result[key] = value;\n        }\n      });\n      return result;\n    }\n\n    /**\n     * Creates a two dimensional array of the given object's key-value pairs,\n     * i.e. `[[key1, value1], [key2, value2]]`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns new array of key-value pairs.\n     * @example\n     *\n     * _.pairs({ 'moe': 30, 'larry': 40 });\n     * // => [['moe', 30], ['larry', 40]] (order is not guaranteed)\n     */\n    function pairs(object) {\n      var index = -1,\n          props = keys(object),\n          length = props.length,\n          result = Array(length);\n\n      while (++index < length) {\n        var key = props[index];\n        result[index] = [key, object[key]];\n      }\n      return result;\n    }\n\n    /**\n     * Creates a shallow clone of `object` composed of the specified properties.\n     * Property names may be specified as individual arguments or as arrays of property\n     * names. If `callback` is passed, it will be executed for each property in the\n     * `object`, picking the properties `callback` returns truthy for. The `callback`\n     * is bound to `thisArg` and invoked with three arguments; (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The source object.\n     * @param {Array|Function|String} callback|[prop1, prop2, ...] The function called\n     *  per iteration or properties to pick, either as individual arguments or arrays.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns an object composed of the picked properties.\n     * @example\n     *\n     * _.pick({ 'name': 'moe', '_userid': 'moe1' }, 'name');\n     * // => { 'name': 'moe' }\n     *\n     * _.pick({ 'name': 'moe', '_userid': 'moe1' }, function(value, key) {\n     *   return key.charAt(0) != '_';\n     * });\n     * // => { 'name': 'moe' }\n     */\n    function pick(object, callback, thisArg) {\n      var result = {};\n      if (typeof callback != 'function') {\n        var index = -1,\n            props = concat.apply(arrayRef, nativeSlice.call(arguments, 1)),\n            length = isObject(object) ? props.length : 0;\n\n        while (++index < length) {\n          var key = props[index];\n          if (key in object) {\n            result[key] = object[key];\n          }\n        }\n      } else {\n        callback = lodash.createCallback(callback, thisArg);\n        forIn(object, function(value, key, object) {\n          if (callback(value, key, object)) {\n            result[key] = value;\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * An alternative to `_.reduce`, this method transforms an `object` to a new\n     * `accumulator` object which is the result of running each of its elements\n     * through the `callback`, with each `callback` execution potentially mutating\n     * the `accumulator` object. The `callback` is bound to `thisArg` and invoked\n     * with four arguments; (accumulator, value, key, object). Callbacks may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {Mixed} [accumulator] The custom accumulator value.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Mixed} Returns the accumulated value.\n     * @example\n     *\n     * var squares = _.transform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(result, num) {\n     *   num *= num;\n     *   if (num % 2) {\n     *     return result.push(num) < 3;\n     *   }\n     * });\n     * // => [1, 9, 25]\n     *\n     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {\n     *   result[key] = num * 3;\n     * });\n     * // => { 'a': 3, 'b': 6, 'c': 9 }\n     */\n    function transform(object, callback, accumulator, thisArg) {\n      var isArr = isArray(object);\n      callback = lodash.createCallback(callback, thisArg, 4);\n\n      if (accumulator == null) {\n        if (isArr) {\n          accumulator = [];\n        } else {\n          var ctor = object && object.constructor,\n              proto = ctor && ctor.prototype;\n\n          accumulator = createObject(proto);\n        }\n      }\n      (isArr ? forEach : forOwn)(object, function(value, index, object) {\n        return callback(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Creates an array composed of the own enumerable property values of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns a new array of property values.\n     * @example\n     *\n     * _.values({ 'one': 1, 'two': 2, 'three': 3 });\n     * // => [1, 2, 3] (order is not guaranteed)\n     */\n    function values(object) {\n      var index = -1,\n          props = keys(object),\n          length = props.length,\n          result = Array(length);\n\n      while (++index < length) {\n        result[index] = object[props[index]];\n      }\n      return result;\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements from the specified indexes, or keys, of the\n     * `collection`. Indexes may be specified as individual arguments or as arrays\n     * of indexes.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {Array|Number|String} [index1, index2, ...] The indexes of\n     *  `collection` to retrieve, either as individual arguments or arrays.\n     * @returns {Array} Returns a new array of elements corresponding to the\n     *  provided indexes.\n     * @example\n     *\n     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);\n     * // => ['a', 'c', 'e']\n     *\n     * _.at(['moe', 'larry', 'curly'], 0, 2);\n     * // => ['moe', 'curly']\n     */\n    function at(collection) {\n      var index = -1,\n          props = concat.apply(arrayRef, nativeSlice.call(arguments, 1)),\n          length = props.length,\n          result = Array(length);\n\n      while(++index < length) {\n        result[index] = collection[props[index]];\n      }\n      return result;\n    }\n\n    /**\n     * Checks if a given `target` element is present in a `collection` using strict\n     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used\n     * as the offset from the end of the collection.\n     *\n     * @static\n     * @memberOf _\n     * @alias include\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {Mixed} target The value to check for.\n     * @param {Number} [fromIndex=0] The index to search from.\n     * @returns {Boolean} Returns `true` if the `target` element is found, else `false`.\n     * @example\n     *\n     * _.contains([1, 2, 3], 1);\n     * // => true\n     *\n     * _.contains([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.contains({ 'name': 'moe', 'age': 40 }, 'moe');\n     * // => true\n     *\n     * _.contains('curly', 'ur');\n     * // => true\n     */\n    function contains(collection, target, fromIndex) {\n      var index = -1,\n          indexOf = getIndexOf(),\n          length = collection ? collection.length : 0,\n          result = false;\n\n      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;\n      if (length && typeof length == 'number') {\n        result = (isString(collection)\n          ? collection.indexOf(target, fromIndex)\n          : indexOf(collection, target, fromIndex)\n        ) > -1;\n      } else {\n        forOwn(collection, function(value) {\n          if (++index >= fromIndex) {\n            return !(result = value === target);\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Creates an object composed of keys returned from running each element of the\n     * `collection` through the given `callback`. The corresponding value of each key\n     * is the number of times the key was returned by the `callback`. The `callback`\n     * is bound to `thisArg` and invoked with three arguments; (value, index|key, collection).\n     *\n     * If a property name is passed for `callback`, the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is passed for `callback`, the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {Function|Object|String} [callback=identity] The function called per\n     *  iteration. If a property name or object is passed, it will be used to create\n     *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });\n     * // => { '4': 1, '6': 2 }\n     *\n     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n     * // => { '4': 1, '6': 2 }\n     *\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    function countBy(collection, callback, thisArg) {\n      var result = {};\n      callback = lodash.createCallback(callback, thisArg);\n\n      forEach(collection, function(value, key, collection) {\n        key = String(callback(value, key, collection));\n        (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);\n      });\n      return result;\n    }\n\n    /**\n     * Checks if the `callback` returns a truthy value for **all** elements of a\n     * `collection`. The `callback` is bound to `thisArg` and invoked with three\n     * arguments; (value, index|key, collection).\n     *\n     * If a property name is passed for `callback`, the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is passed for `callback`, the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias all\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {Function|Object|String} [callback=identity] The function called per\n     *  iteration. If a property name or object is passed, it will be used to create\n     *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Boolean} Returns `true` if all elements pass the callback check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var stooges = [\n     *   { 'name': 'moe', 'age': 40 },\n     *   { 'name': 'larry', 'age': 50 }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.every(stooges, 'age');\n     * // => true\n     *\n     * // using \"_.where\" callback shorthand\n     * _.every(stooges, { 'age': 50 });\n     * // => false\n     */\n    function every(collection, callback, thisArg) {\n      var result = true;\n      callback = lodash.createCallback(callback, thisArg);\n\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      if (typeof length == 'number') {\n        while (++index < length) {\n          if (!(result = !!callback(collection[index], index, collection))) {\n            break;\n          }\n        }\n      } else {\n        forOwn(collection, function(value, index, collection) {\n          return (result = !!callback(value, index, collection));\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Examines each element in a `collection`, returning an array of all elements\n     * the `callback` returns truthy for. The `callback` is bound to `thisArg` and\n     * invoked with three arguments; (value, index|key, collection).\n     *\n     * If a property name is passed for `callback`, the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is passed for `callback`, the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias select\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {Function|Object|String} [callback=identity] The function called per\n     *  iteration. If a property name or object is passed, it will be used to create\n     *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of elements that passed the callback check.\n     * @example\n     *\n     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n     * // => [2, 4, 6]\n     *\n     * var food = [\n     *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },\n     *   { 'name': 'carrot', 'organic': true,  'type': 'vegetable' }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.filter(food, 'organic');\n     * // => [{ 'name': 'carrot', 'organic': true, 'type': 'vegetable' }]\n     *\n     * // using \"_.where\" callback shorthand\n     * _.filter(food, { 'type': 'fruit' });\n     * // => [{ 'name': 'apple', 'organic': false, 'type': 'fruit' }]\n     */\n    function filter(collection, callback, thisArg) {\n      var result = [];\n      callback = lodash.createCallback(callback, thisArg);\n\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      if (typeof length == 'number') {\n        while (++index < length) {\n          var value = collection[index];\n          if (callback(value, index, collection)) {\n            result.push(value);\n          }\n        }\n      } else {\n        forOwn(collection, function(value, index, collection) {\n          if (callback(value, index, collection)) {\n            result.push(value);\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Examines each element in a `collection`, returning the first that the `callback`\n     * returns truthy for. The `callback` is bound to `thisArg` and invoked with three\n     * arguments; (value, index|key, collection).\n     *\n     * If a property name is passed for `callback`, the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is passed for `callback`, the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias detect, findWhere\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {Function|Object|String} [callback=identity] The function called per\n     *  iteration. If a property name or object is passed, it will be used to create\n     *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Mixed} Returns the found element, else `undefined`.\n     * @example\n     *\n     * _.find([1, 2, 3, 4], function(num) {\n     *   return num % 2 == 0;\n     * });\n     * // => 2\n     *\n     * var food = [\n     *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },\n     *   { 'name': 'banana', 'organic': true,  'type': 'fruit' },\n     *   { 'name': 'beet',   'organic': false, 'type': 'vegetable' }\n     * ];\n     *\n     * // using \"_.where\" callback shorthand\n     * _.find(food, { 'type': 'vegetable' });\n     * // => { 'name': 'beet', 'organic': false, 'type': 'vegetable' }\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.find(food, 'organic');\n     * // => { 'name': 'banana', 'organic': true, 'type': 'fruit' }\n     */\n    function find(collection, callback, thisArg) {\n      callback = lodash.createCallback(callback, thisArg);\n\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      if (typeof length == 'number') {\n        while (++index < length) {\n          var value = collection[index];\n          if (callback(value, index, collection)) {\n            return value;\n          }\n        }\n      } else {\n        var result;\n        forOwn(collection, function(value, index, collection) {\n          if (callback(value, index, collection)) {\n            result = value;\n            return false;\n          }\n        });\n        return result;\n      }\n    }\n\n    /**\n     * Iterates over a `collection`, executing the `callback` for each element in\n     * the `collection`. The `callback` is bound to `thisArg` and invoked with three\n     * arguments; (value, index|key, collection). Callbacks may exit iteration early\n     * by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias each\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Array|Object|String} Returns `collection`.\n     * @example\n     *\n     * _([1, 2, 3]).forEach(alert).join(',');\n     * // => alerts each number and returns '1,2,3'\n     *\n     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, alert);\n     * // => alerts each number value (order is not guaranteed)\n     */\n    function forEach(collection, callback, thisArg) {\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      callback = callback && typeof thisArg == 'undefined' ? callback : lodash.createCallback(callback, thisArg);\n      if (typeof length == 'number') {\n        while (++index < length) {\n          if (callback(collection[index], index, collection) === false) {\n            break;\n          }\n        }\n      } else {\n        forOwn(collection, callback);\n      }\n      return collection;\n    }\n\n    /**\n     * Creates an object composed of keys returned from running each element of the\n     * `collection` through the `callback`. The corresponding value of each key is\n     * an array of elements passed to `callback` that returned the key. The `callback`\n     * is bound to `thisArg` and invoked with three arguments; (value, index|key, collection).\n     *\n     * If a property name is passed for `callback`, the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is passed for `callback`, the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {Function|Object|String} [callback=identity] The function called per\n     *  iteration. If a property name or object is passed, it will be used to create\n     *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });\n     * // => { '4': [4.2], '6': [6.1, 6.4] }\n     *\n     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n     * // => { '4': [4.2], '6': [6.1, 6.4] }\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    function groupBy(collection, callback, thisArg) {\n      var result = {};\n      callback = lodash.createCallback(callback, thisArg);\n\n      forEach(collection, function(value, key, collection) {\n        key = String(callback(value, key, collection));\n        (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);\n      });\n      return result;\n    }\n\n    /**\n     * Invokes the method named by `methodName` on each element in the `collection`,\n     * returning an array of the results of each invoked method. Additional arguments\n     * will be passed to each invoked method. If `methodName` is a function, it will\n     * be invoked for, and `this` bound to, each element in the `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {Function|String} methodName The name of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the method with.\n     * @returns {Array} Returns a new array of the results of each invoked method.\n     * @example\n     *\n     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invoke([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    function invoke(collection, methodName) {\n      var args = nativeSlice.call(arguments, 2),\n          index = -1,\n          isFunc = typeof methodName == 'function',\n          length = collection ? collection.length : 0,\n          result = Array(typeof length == 'number' ? length : 0);\n\n      forEach(collection, function(value) {\n        result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an array of values by running each element in the `collection`\n     * through the `callback`. The `callback` is bound to `thisArg` and invoked with\n     * three arguments; (value, index|key, collection).\n     *\n     * If a property name is passed for `callback`, the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is passed for `callback`, the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias collect\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {Function|Object|String} [callback=identity] The function called per\n     *  iteration. If a property name or object is passed, it will be used to create\n     *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of the results of each `callback` execution.\n     * @example\n     *\n     * _.map([1, 2, 3], function(num) { return num * 3; });\n     * // => [3, 6, 9]\n     *\n     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });\n     * // => [3, 6, 9] (order is not guaranteed)\n     *\n     * var stooges = [\n     *   { 'name': 'moe', 'age': 40 },\n     *   { 'name': 'larry', 'age': 50 }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.map(stooges, 'name');\n     * // => ['moe', 'larry']\n     */\n    function map(collection, callback, thisArg) {\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      callback = lodash.createCallback(callback, thisArg);\n      if (typeof length == 'number') {\n        var result = Array(length);\n        while (++index < length) {\n          result[index] = callback(collection[index], index, collection);\n        }\n      } else {\n        result = [];\n        forOwn(collection, function(value, key, collection) {\n          result[++index] = callback(value, key, collection);\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Retrieves the maximum value of an `array`. If `callback` is passed,\n     * it will be executed for each value in the `array` to generate the\n     * criterion by which the value is ranked. The `callback` is bound to\n     * `thisArg` and invoked with three arguments; (value, index, collection).\n     *\n     * If a property name is passed for `callback`, the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is passed for `callback`, the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {Function|Object|String} [callback=identity] The function called per\n     *  iteration. If a property name or object is passed, it will be used to create\n     *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Mixed} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * var stooges = [\n     *   { 'name': 'moe', 'age': 40 },\n     *   { 'name': 'larry', 'age': 50 }\n     * ];\n     *\n     * _.max(stooges, function(stooge) { return stooge.age; });\n     * // => { 'name': 'larry', 'age': 50 };\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.max(stooges, 'age');\n     * // => { 'name': 'larry', 'age': 50 };\n     */\n    function max(collection, callback, thisArg) {\n      var computed = -Infinity,\n          result = computed;\n\n      if (!callback && isArray(collection)) {\n        var index = -1,\n            length = collection.length;\n\n        while (++index < length) {\n          var value = collection[index];\n          if (value > result) {\n            result = value;\n          }\n        }\n      } else {\n        callback = (!callback && isString(collection))\n          ? charAtCallback\n          : lodash.createCallback(callback, thisArg);\n\n        forEach(collection, function(value, index, collection) {\n          var current = callback(value, index, collection);\n          if (current > computed) {\n            computed = current;\n            result = value;\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Retrieves the minimum value of an `array`. If `callback` is passed,\n     * it will be executed for each value in the `array` to generate the\n     * criterion by which the value is ranked. The `callback` is bound to `thisArg`\n     * and invoked with three arguments; (value, index, collection).\n     *\n     * If a property name is passed for `callback`, the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is passed for `callback`, the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {Function|Object|String} [callback=identity] The function called per\n     *  iteration. If a property name or object is passed, it will be used to create\n     *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Mixed} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * var stooges = [\n     *   { 'name': 'moe', 'age': 40 },\n     *   { 'name': 'larry', 'age': 50 }\n     * ];\n     *\n     * _.min(stooges, function(stooge) { return stooge.age; });\n     * // => { 'name': 'moe', 'age': 40 };\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.min(stooges, 'age');\n     * // => { 'name': 'moe', 'age': 40 };\n     */\n    function min(collection, callback, thisArg) {\n      var computed = Infinity,\n          result = computed;\n\n      if (!callback && isArray(collection)) {\n        var index = -1,\n            length = collection.length;\n\n        while (++index < length) {\n          var value = collection[index];\n          if (value < result) {\n            result = value;\n          }\n        }\n      } else {\n        callback = (!callback && isString(collection))\n          ? charAtCallback\n          : lodash.createCallback(callback, thisArg);\n\n        forEach(collection, function(value, index, collection) {\n          var current = callback(value, index, collection);\n          if (current < computed) {\n            computed = current;\n            result = value;\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Retrieves the value of a specified property from all elements in the `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {String} property The property to pluck.\n     * @returns {Array} Returns a new array of property values.\n     * @example\n     *\n     * var stooges = [\n     *   { 'name': 'moe', 'age': 40 },\n     *   { 'name': 'larry', 'age': 50 }\n     * ];\n     *\n     * _.pluck(stooges, 'name');\n     * // => ['moe', 'larry']\n     */\n    function pluck(collection, property) {\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      if (typeof length == 'number') {\n        var result = Array(length);\n        while (++index < length) {\n          result[index] = collection[index][property];\n        }\n      }\n      return result || map(collection, property);\n    }\n\n    /**\n     * Reduces a `collection` to a value which is the accumulated result of running\n     * each element in the `collection` through the `callback`, where each successive\n     * `callback` execution consumes the return value of the previous execution.\n     * If `accumulator` is not passed, the first element of the `collection` will be\n     * used as the initial `accumulator` value. The `callback` is bound to `thisArg`\n     * and invoked with four arguments; (accumulator, value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @alias foldl, inject\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {Mixed} [accumulator] Initial value of the accumulator.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Mixed} Returns the accumulated value.\n     * @example\n     *\n     * var sum = _.reduce([1, 2, 3], function(sum, num) {\n     *   return sum + num;\n     * });\n     * // => 6\n     *\n     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {\n     *   result[key] = num * 3;\n     *   return result;\n     * }, {});\n     * // => { 'a': 3, 'b': 6, 'c': 9 }\n     */\n    function reduce(collection, callback, accumulator, thisArg) {\n      if (!collection) return accumulator;\n      var noaccum = arguments.length < 3;\n      callback = lodash.createCallback(callback, thisArg, 4);\n\n      var index = -1,\n          length = collection.length;\n\n      if (typeof length == 'number') {\n        if (noaccum) {\n          accumulator = collection[++index];\n        }\n        while (++index < length) {\n          accumulator = callback(accumulator, collection[index], index, collection);\n        }\n      } else {\n        forOwn(collection, function(value, index, collection) {\n          accumulator = noaccum\n            ? (noaccum = false, value)\n            : callback(accumulator, value, index, collection)\n        });\n      }\n      return accumulator;\n    }\n\n    /**\n     * This method is similar to `_.reduce`, except that it iterates over a\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @alias foldr\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {Mixed} [accumulator] Initial value of the accumulator.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Mixed} Returns the accumulated value.\n     * @example\n     *\n     * var list = [[0, 1], [2, 3], [4, 5]];\n     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, callback, accumulator, thisArg) {\n      var iterable = collection,\n          length = collection ? collection.length : 0,\n          noaccum = arguments.length < 3;\n\n      if (typeof length != 'number') {\n        var props = keys(collection);\n        length = props.length;\n      }\n      callback = lodash.createCallback(callback, thisArg, 4);\n      forEach(collection, function(value, index, collection) {\n        index = props ? props[--length] : --length;\n        accumulator = noaccum\n          ? (noaccum = false, iterable[index])\n          : callback(accumulator, iterable[index], index, collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The opposite of `_.filter`, this method returns the elements of a\n     * `collection` that `callback` does **not** return truthy for.\n     *\n     * If a property name is passed for `callback`, the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is passed for `callback`, the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {Function|Object|String} [callback=identity] The function called per\n     *  iteration. If a property name or object is passed, it will be used to create\n     *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of elements that did **not** pass the\n     *  callback check.\n     * @example\n     *\n     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n     * // => [1, 3, 5]\n     *\n     * var food = [\n     *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },\n     *   { 'name': 'carrot', 'organic': true,  'type': 'vegetable' }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.reject(food, 'organic');\n     * // => [{ 'name': 'apple', 'organic': false, 'type': 'fruit' }]\n     *\n     * // using \"_.where\" callback shorthand\n     * _.reject(food, { 'type': 'fruit' });\n     * // => [{ 'name': 'carrot', 'organic': true, 'type': 'vegetable' }]\n     */\n    function reject(collection, callback, thisArg) {\n      callback = lodash.createCallback(callback, thisArg);\n      return filter(collection, function(value, index, collection) {\n        return !callback(value, index, collection);\n      });\n    }\n\n    /**\n     * Creates an array of shuffled `array` values, using a version of the\n     * Fisher-Yates shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to shuffle.\n     * @returns {Array} Returns a new shuffled collection.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4, 5, 6]);\n     * // => [4, 1, 6, 3, 5, 2]\n     */\n    function shuffle(collection) {\n      var index = -1,\n          length = collection ? collection.length : 0,\n          result = Array(typeof length == 'number' ? length : 0);\n\n      forEach(collection, function(value) {\n        var rand = floor(nativeRandom() * (++index + 1));\n        result[index] = result[rand];\n        result[rand] = value;\n      });\n      return result;\n    }\n\n    /**\n     * Gets the size of the `collection` by returning `collection.length` for arrays\n     * and array-like objects or the number of own enumerable properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to inspect.\n     * @returns {Number} Returns `collection.length` or number of own enumerable properties.\n     * @example\n     *\n     * _.size([1, 2]);\n     * // => 2\n     *\n     * _.size({ 'one': 1, 'two': 2, 'three': 3 });\n     * // => 3\n     *\n     * _.size('curly');\n     * // => 5\n     */\n    function size(collection) {\n      var length = collection ? collection.length : 0;\n      return typeof length == 'number' ? length : keys(collection).length;\n    }\n\n    /**\n     * Checks if the `callback` returns a truthy value for **any** element of a\n     * `collection`. The function returns as soon as it finds passing value, and\n     * does not iterate over the entire `collection`. The `callback` is bound to\n     * `thisArg` and invoked with three arguments; (value, index|key, collection).\n     *\n     * If a property name is passed for `callback`, the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is passed for `callback`, the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias any\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {Function|Object|String} [callback=identity] The function called per\n     *  iteration. If a property name or object is passed, it will be used to create\n     *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Boolean} Returns `true` if any element passes the callback check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var food = [\n     *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },\n     *   { 'name': 'carrot', 'organic': true,  'type': 'vegetable' }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.some(food, 'organic');\n     * // => true\n     *\n     * // using \"_.where\" callback shorthand\n     * _.some(food, { 'type': 'meat' });\n     * // => false\n     */\n    function some(collection, callback, thisArg) {\n      var result;\n      callback = lodash.createCallback(callback, thisArg);\n\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      if (typeof length == 'number') {\n        while (++index < length) {\n          if ((result = callback(collection[index], index, collection))) {\n            break;\n          }\n        }\n      } else {\n        forOwn(collection, function(value, index, collection) {\n          return !(result = callback(value, index, collection));\n        });\n      }\n      return !!result;\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in the `collection` through the `callback`. This method\n     * performs a stable sort, that is, it will preserve the original sort order of\n     * equal elements. The `callback` is bound to `thisArg` and invoked with three\n     * arguments; (value, index|key, collection).\n     *\n     * If a property name is passed for `callback`, the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is passed for `callback`, the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {Function|Object|String} [callback=identity] The function called per\n     *  iteration. If a property name or object is passed, it will be used to create\n     *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of sorted elements.\n     * @example\n     *\n     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });\n     * // => [3, 1, 2]\n     *\n     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);\n     * // => [3, 1, 2]\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.sortBy(['banana', 'strawberry', 'apple'], 'length');\n     * // => ['apple', 'banana', 'strawberry']\n     */\n    function sortBy(collection, callback, thisArg) {\n      var index = -1,\n          length = collection ? collection.length : 0,\n          result = Array(typeof length == 'number' ? length : 0);\n\n      callback = lodash.createCallback(callback, thisArg);\n      forEach(collection, function(value, key, collection) {\n        var object = result[++index] = getObject();\n        object.criteria = callback(value, key, collection);\n        object.index = index;\n        object.value = value;\n      });\n\n      length = result.length;\n      result.sort(compareAscending);\n      while (length--) {\n        var object = result[length];\n        result[length] = object.value;\n        releaseObject(object);\n      }\n      return result;\n    }\n\n    /**\n     * Converts the `collection` to an array.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to convert.\n     * @returns {Array} Returns the new converted array.\n     * @example\n     *\n     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);\n     * // => [2, 3, 4]\n     */\n    function toArray(collection) {\n      if (collection && typeof collection.length == 'number') {\n        return slice(collection);\n      }\n      return values(collection);\n    }\n\n    /**\n     * Examines each element in a `collection`, returning an array of all elements\n     * that have the given `properties`. When checking `properties`, this method\n     * performs a deep comparison between values to determine if they are equivalent\n     * to each other.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Collections\n     * @param {Array|Object|String} collection The collection to iterate over.\n     * @param {Object} properties The object of property values to filter by.\n     * @returns {Array} Returns a new array of elements that have the given `properties`.\n     * @example\n     *\n     * var stooges = [\n     *   { 'name': 'moe', 'age': 40 },\n     *   { 'name': 'larry', 'age': 50 }\n     * ];\n     *\n     * _.where(stooges, { 'age': 40 });\n     * // => [{ 'name': 'moe', 'age': 40 }]\n     */\n    var where = filter;\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array with all falsey values of `array` removed. The values\n     * `false`, `null`, `0`, `\"\"`, `undefined` and `NaN` are all falsey.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns a new filtered array.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array ? array.length : 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of `array` elements not present in the other arrays\n     * using strict equality for comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to process.\n     * @param {Array} [array1, array2, ...] Arrays to check.\n     * @returns {Array} Returns a new array of `array` elements not present in the\n     *  other arrays.\n     * @example\n     *\n     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n     * // => [1, 3, 4]\n     */\n    function difference(array) {\n      var index = -1,\n          indexOf = getIndexOf(),\n          length = array ? array.length : 0,\n          seen = concat.apply(arrayRef, nativeSlice.call(arguments, 1)),\n          result = [];\n\n      var isLarge = length >= largeArraySize && indexOf === basicIndexOf;\n\n      if (isLarge) {\n        var cache = createCache(seen);\n        if (cache) {\n          indexOf = cacheIndexOf;\n          seen = cache;\n        } else {\n          isLarge = false;\n        }\n      }\n      while (++index < length) {\n        var value = array[index];\n        if (indexOf(seen, value) < 0) {\n          result.push(value);\n        }\n      }\n      if (isLarge) {\n        releaseObject(seen);\n      }\n      return result;\n    }\n\n    /**\n     * This method is similar to `_.find`, except that it returns the index of\n     * the element that passes the callback check, instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to search.\n     * @param {Function|Object|String} [callback=identity] The function called per\n     *  iteration. If a property name or object is passed, it will be used to create\n     *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Mixed} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * _.findIndex(['apple', 'banana', 'beet'], function(food) {\n     *   return /^b/.test(food);\n     * });\n     * // => 1\n     */\n    function findIndex(array, callback, thisArg) {\n      var index = -1,\n          length = array ? array.length : 0;\n\n      callback = lodash.createCallback(callback, thisArg);\n      while (++index < length) {\n        if (callback(array[index], index, array)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Gets the first element of the `array`. If a number `n` is passed, the first\n     * `n` elements of the `array` are returned. If a `callback` function is passed,\n     * elements at the beginning of the array are returned as long as the `callback`\n     * returns truthy. The `callback` is bound to `thisArg` and invoked with three\n     * arguments; (value, index, array).\n     *\n     * If a property name is passed for `callback`, the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is passed for `callback`, the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias head, take\n     * @category Arrays\n     * @param {Array} array The array to query.\n     * @param {Function|Object|Number|String} [callback|n] The function called\n     *  per element or the number of elements to return. If a property name or\n     *  object is passed, it will be used to create a \"_.pluck\" or \"_.where\"\n     *  style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Mixed} Returns the first element(s) of `array`.\n     * @example\n     *\n     * _.first([1, 2, 3]);\n     * // => 1\n     *\n     * _.first([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.first([1, 2, 3], function(num) {\n     *   return num < 3;\n     * });\n     * // => [1, 2]\n     *\n     * var food = [\n     *   { 'name': 'banana', 'organic': true },\n     *   { 'name': 'beet',   'organic': false },\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.first(food, 'organic');\n     * // => [{ 'name': 'banana', 'organic': true }]\n     *\n     * var food = [\n     *   { 'name': 'apple',  'type': 'fruit' },\n     *   { 'name': 'banana', 'type': 'fruit' },\n     *   { 'name': 'beet',   'type': 'vegetable' }\n     * ];\n     *\n     * // using \"_.where\" callback shorthand\n     * _.first(food, { 'type': 'fruit' });\n     * // => [{ 'name': 'apple', 'type': 'fruit' }, { 'name': 'banana', 'type': 'fruit' }]\n     */\n    function first(array, callback, thisArg) {\n      if (array) {\n        var n = 0,\n            length = array.length;\n\n        if (typeof callback != 'number' && callback != null) {\n          var index = -1;\n          callback = lodash.createCallback(callback, thisArg);\n          while (++index < length && callback(array[index], index, array)) {\n            n++;\n          }\n        } else {\n          n = callback;\n          if (n == null || thisArg) {\n            return array[0];\n          }\n        }\n        return slice(array, 0, nativeMin(nativeMax(0, n), length));\n      }\n    }\n\n    /**\n     * Flattens a nested array (the nesting can be to any depth). If `isShallow`\n     * is truthy, `array` will only be flattened a single level. If `callback`\n     * is passed, each element of `array` is passed through a `callback` before\n     * flattening. The `callback` is bound to `thisArg` and invoked with three\n     * arguments; (value, index, array).\n     *\n     * If a property name is passed for `callback`, the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is passed for `callback`, the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to flatten.\n     * @param {Boolean} [isShallow=false] A flag to indicate only flattening a single level.\n     * @param {Function|Object|String} [callback=identity] The function called per\n     *  iteration. If a property name or object is passed, it will be used to create\n     *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2], [3, [[4]]]]);\n     * // => [1, 2, 3, 4];\n     *\n     * _.flatten([1, [2], [3, [[4]]]], true);\n     * // => [1, 2, 3, [[4]]];\n     *\n     * var stooges = [\n     *   { 'name': 'curly', 'quotes': ['Oh, a wise guy, eh?', 'Poifect!'] },\n     *   { 'name': 'moe', 'quotes': ['Spread out!', 'You knucklehead!'] }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.flatten(stooges, 'quotes');\n     * // => ['Oh, a wise guy, eh?', 'Poifect!', 'Spread out!', 'You knucklehead!']\n     */\n    var flatten = overloadWrapper(function flatten(array, isShallow, callback) {\n      var index = -1,\n          length = array ? array.length : 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (callback) {\n          value = callback(value, index, array);\n        }\n        // recursively flatten arrays (susceptible to call stack limits)\n        if (isArray(value)) {\n          push.apply(result, isShallow ? value : flatten(value));\n        } else {\n          result.push(value);\n        }\n      }\n      return result;\n    });\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found using\n     * strict equality for comparisons, i.e. `===`. If the `array` is already\n     * sorted, passing `true` for `fromIndex` will run a faster binary search.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to search.\n     * @param {Mixed} value The value to search for.\n     * @param {Boolean|Number} [fromIndex=0] The index to search from or `true` to\n     *  perform a binary search on a sorted `array`.\n     * @returns {Number} Returns the index of the matched value or `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 3, 1, 2, 3], 2);\n     * // => 1\n     *\n     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);\n     * // => 4\n     *\n     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);\n     * // => 2\n     */\n    function indexOf(array, value, fromIndex) {\n      if (typeof fromIndex == 'number') {\n        var length = array ? array.length : 0;\n        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);\n      } else if (fromIndex) {\n        var index = sortedIndex(array, value);\n        return array[index] === value ? index : -1;\n      }\n      return array ? basicIndexOf(array, value, fromIndex) : -1;\n    }\n\n    /**\n     * Gets all but the last element of `array`. If a number `n` is passed, the\n     * last `n` elements are excluded from the result. If a `callback` function\n     * is passed, elements at the end of the array are excluded from the result\n     * as long as the `callback` returns truthy. The `callback` is bound to\n     * `thisArg` and invoked with three arguments; (value, index, array).\n     *\n     * If a property name is passed for `callback`, the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is passed for `callback`, the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to query.\n     * @param {Function|Object|Number|String} [callback|n=1] The function called\n     *  per element or the number of elements to exclude. If a property name or\n     *  object is passed, it will be used to create a \"_.pluck\" or \"_.where\"\n     *  style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.initial([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.initial([1, 2, 3], function(num) {\n     *   return num > 1;\n     * });\n     * // => [1]\n     *\n     * var food = [\n     *   { 'name': 'beet',   'organic': false },\n     *   { 'name': 'carrot', 'organic': true }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.initial(food, 'organic');\n     * // => [{ 'name': 'beet',   'organic': false }]\n     *\n     * var food = [\n     *   { 'name': 'banana', 'type': 'fruit' },\n     *   { 'name': 'beet',   'type': 'vegetable' },\n     *   { 'name': 'carrot', 'type': 'vegetable' }\n     * ];\n     *\n     * // using \"_.where\" callback shorthand\n     * _.initial(food, { 'type': 'vegetable' });\n     * // => [{ 'name': 'banana', 'type': 'fruit' }]\n     */\n    function initial(array, callback, thisArg) {\n      if (!array) {\n        return [];\n      }\n      var n = 0,\n          length = array.length;\n\n      if (typeof callback != 'number' && callback != null) {\n        var index = length;\n        callback = lodash.createCallback(callback, thisArg);\n        while (index-- && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = (callback == null || thisArg) ? 1 : callback || n;\n      }\n      return slice(array, 0, nativeMin(nativeMax(0, length - n), length));\n    }\n\n    /**\n     * Computes the intersection of all the passed-in arrays using strict equality\n     * for comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} [array1, array2, ...] Arrays to process.\n     * @returns {Array} Returns a new array of unique elements that are present\n     *  in **all** of the arrays.\n     * @example\n     *\n     * _.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n     * // => [1, 2]\n     */\n    function intersection(array) {\n      var args = arguments,\n          argsLength = args.length,\n          argsIndex = -1,\n          caches = getArray(),\n          index = -1,\n          indexOf = getIndexOf(),\n          length = array ? array.length : 0,\n          result = [],\n          seen = getArray();\n\n      while (++argsIndex < argsLength) {\n        var value = args[argsIndex];\n        caches[argsIndex] = indexOf === basicIndexOf &&\n          (value ? value.length : 0) >= largeArraySize &&\n          createCache(argsIndex ? args[argsIndex] : seen);\n      }\n      outer:\n      while (++index < length) {\n        var cache = caches[0];\n        value = array[index];\n\n        if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {\n          argsIndex = argsLength;\n          (cache || seen).push(value);\n          while (--argsIndex) {\n            cache = caches[argsIndex];\n            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n      }\n      while (argsLength--) {\n        cache = caches[argsLength];\n        if (cache) {\n          releaseObject(cache);\n        }\n      }\n      releaseArray(caches);\n      releaseArray(seen);\n      return result;\n    }\n\n    /**\n     * Gets the last element of the `array`. If a number `n` is passed, the\n     * last `n` elements of the `array` are returned. If a `callback` function\n     * is passed, elements at the end of the array are returned as long as the\n     * `callback` returns truthy. The `callback` is bound to `thisArg` and\n     * invoked with three arguments;(value, index, array).\n     *\n     *\n     * If a property name is passed for `callback`, the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is passed for `callback`, the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to query.\n     * @param {Function|Object|Number|String} [callback|n] The function called\n     *  per element or the number of elements to return. If a property name or\n     *  object is passed, it will be used to create a \"_.pluck\" or \"_.where\"\n     *  style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Mixed} Returns the last element(s) of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     *\n     * _.last([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.last([1, 2, 3], function(num) {\n     *   return num > 1;\n     * });\n     * // => [2, 3]\n     *\n     * var food = [\n     *   { 'name': 'beet',   'organic': false },\n     *   { 'name': 'carrot', 'organic': true }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.last(food, 'organic');\n     * // => [{ 'name': 'carrot', 'organic': true }]\n     *\n     * var food = [\n     *   { 'name': 'banana', 'type': 'fruit' },\n     *   { 'name': 'beet',   'type': 'vegetable' },\n     *   { 'name': 'carrot', 'type': 'vegetable' }\n     * ];\n     *\n     * // using \"_.where\" callback shorthand\n     * _.last(food, { 'type': 'vegetable' });\n     * // => [{ 'name': 'beet', 'type': 'vegetable' }, { 'name': 'carrot', 'type': 'vegetable' }]\n     */\n    function last(array, callback, thisArg) {\n      if (array) {\n        var n = 0,\n            length = array.length;\n\n        if (typeof callback != 'number' && callback != null) {\n          var index = length;\n          callback = lodash.createCallback(callback, thisArg);\n          while (index-- && callback(array[index], index, array)) {\n            n++;\n          }\n        } else {\n          n = callback;\n          if (n == null || thisArg) {\n            return array[length - 1];\n          }\n        }\n        return slice(array, nativeMax(0, length - n));\n      }\n    }\n\n    /**\n     * Gets the index at which the last occurrence of `value` is found using strict\n     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used\n     * as the offset from the end of the collection.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to search.\n     * @param {Mixed} value The value to search for.\n     * @param {Number} [fromIndex=array.length-1] The index to search from.\n     * @returns {Number} Returns the index of the matched value or `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);\n     * // => 4\n     *\n     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var index = array ? array.length : 0;\n      if (typeof fromIndex == 'number') {\n        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;\n      }\n      while (index--) {\n        if (array[index] === value) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to but not including `end`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Number} [start=0] The start of the range.\n     * @param {Number} end The end of the range.\n     * @param {Number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns a new range array.\n     * @example\n     *\n     * _.range(10);\n     * // => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n     *\n     * _.range(1, 11);\n     * // => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n     *\n     * _.range(0, 30, 5);\n     * // => [0, 5, 10, 15, 20, 25]\n     *\n     * _.range(0, -10, -1);\n     * // => [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n     *\n     * _.range(0);\n     * // => []\n     */\n    function range(start, end, step) {\n      start = +start || 0;\n      step = +step || 1;\n\n      if (end == null) {\n        end = start;\n        start = 0;\n      }\n      // use `Array(length)` so V8 will avoid the slower \"dictionary\" mode\n      // http://youtu.be/XAqIpGU8ZZk#t=17m25s\n      var index = -1,\n          length = nativeMax(0, ceil((end - start) / step)),\n          result = Array(length);\n\n      while (++index < length) {\n        result[index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The opposite of `_.initial`, this method gets all but the first value of\n     * `array`. If a number `n` is passed, the first `n` values are excluded from\n     * the result. If a `callback` function is passed, elements at the beginning\n     * of the array are excluded from the result as long as the `callback` returns\n     * truthy. The `callback` is bound to `thisArg` and invoked with three\n     * arguments; (value, index, array).\n     *\n     * If a property name is passed for `callback`, the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is passed for `callback`, the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias drop, tail\n     * @category Arrays\n     * @param {Array} array The array to query.\n     * @param {Function|Object|Number|String} [callback|n=1] The function called\n     *  per element or the number of elements to exclude. If a property name or\n     *  object is passed, it will be used to create a \"_.pluck\" or \"_.where\"\n     *  style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a slice of `array`.\n     * @example\n     *\n     * _.rest([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.rest([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.rest([1, 2, 3], function(num) {\n     *   return num < 3;\n     * });\n     * // => [3]\n     *\n     * var food = [\n     *   { 'name': 'banana', 'organic': true },\n     *   { 'name': 'beet',   'organic': false },\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.rest(food, 'organic');\n     * // => [{ 'name': 'beet', 'organic': false }]\n     *\n     * var food = [\n     *   { 'name': 'apple',  'type': 'fruit' },\n     *   { 'name': 'banana', 'type': 'fruit' },\n     *   { 'name': 'beet',   'type': 'vegetable' }\n     * ];\n     *\n     * // using \"_.where\" callback shorthand\n     * _.rest(food, { 'type': 'fruit' });\n     * // => [{ 'name': 'beet', 'type': 'vegetable' }]\n     */\n    function rest(array, callback, thisArg) {\n      if (typeof callback != 'number' && callback != null) {\n        var n = 0,\n            index = -1,\n            length = array ? array.length : 0;\n\n        callback = lodash.createCallback(callback, thisArg);\n        while (++index < length && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);\n      }\n      return slice(array, n);\n    }\n\n    /**\n     * Uses a binary search to determine the smallest index at which the `value`\n     * should be inserted into `array` in order to maintain the sort order of the\n     * sorted `array`. If `callback` is passed, it will be executed for `value` and\n     * each element in `array` to compute their sort ranking. The `callback` is\n     * bound to `thisArg` and invoked with one argument; (value).\n     *\n     * If a property name is passed for `callback`, the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is passed for `callback`, the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to inspect.\n     * @param {Mixed} value The value to evaluate.\n     * @param {Function|Object|String} [callback=identity] The function called per\n     *  iteration. If a property name or object is passed, it will be used to create\n     *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Number} Returns the index at which the value should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([20, 30, 50], 40);\n     * // => 2\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');\n     * // => 2\n     *\n     * var dict = {\n     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }\n     * };\n     *\n     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n     *   return dict.wordToNumber[word];\n     * });\n     * // => 2\n     *\n     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n     *   return this.wordToNumber[word];\n     * }, dict);\n     * // => 2\n     */\n    function sortedIndex(array, value, callback, thisArg) {\n      var low = 0,\n          high = array ? array.length : low;\n\n      // explicitly reference `identity` for better inlining in Firefox\n      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;\n      value = callback(value);\n\n      while (low < high) {\n        var mid = (low + high) >>> 1;\n        (callback(array[mid]) < value)\n          ? low = mid + 1\n          : high = mid;\n      }\n      return low;\n    }\n\n    /**\n     * Computes the union of the passed-in arrays using strict equality for\n     * comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} [array1, array2, ...] Arrays to process.\n     * @returns {Array} Returns a new array of unique values, in order, that are\n     *  present in one or more of the arrays.\n     * @example\n     *\n     * _.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n     * // => [1, 2, 3, 101, 10]\n     */\n    function union(array) {\n      if (!isArray(array)) {\n        arguments[0] = array ? nativeSlice.call(array) : arrayRef;\n      }\n      return uniq(concat.apply(arrayRef, arguments));\n    }\n\n    /**\n     * Creates a duplicate-value-free version of the `array` using strict equality\n     * for comparisons, i.e. `===`. If the `array` is already sorted, passing `true`\n     * for `isSorted` will run a faster algorithm. If `callback` is passed, each\n     * element of `array` is passed through the `callback` before uniqueness is computed.\n     * The `callback` is bound to `thisArg` and invoked with three arguments; (value, index, array).\n     *\n     * If a property name is passed for `callback`, the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is passed for `callback`, the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias unique\n     * @category Arrays\n     * @param {Array} array The array to process.\n     * @param {Boolean} [isSorted=false] A flag to indicate that the `array` is already sorted.\n     * @param {Function|Object|String} [callback=identity] The function called per\n     *  iteration. If a property name or object is passed, it will be used to create\n     *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a duplicate-value-free array.\n     * @example\n     *\n     * _.uniq([1, 2, 1, 3, 1]);\n     * // => [1, 2, 3]\n     *\n     * _.uniq([1, 1, 2, 2, 3], true);\n     * // => [1, 2, 3]\n     *\n     * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });\n     * // => ['A', 'b', 'C']\n     *\n     * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);\n     * // => [1, 2.5, 3]\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var uniq = overloadWrapper(function(array, isSorted, callback) {\n      var index = -1,\n          indexOf = getIndexOf(),\n          length = array ? array.length : 0,\n          result = [];\n\n      var isLarge = !isSorted && length >= largeArraySize && indexOf === basicIndexOf,\n          seen = (callback || isLarge) ? getArray() : result;\n\n      if (isLarge) {\n        var cache = createCache(seen);\n        if (cache) {\n          indexOf = cacheIndexOf;\n          seen = cache;\n        } else {\n          isLarge = false;\n          seen = callback ? seen : (releaseArray(seen), result);\n        }\n      }\n      while (++index < length) {\n        var value = array[index],\n            computed = callback ? callback(value, index, array) : value;\n\n        if (isSorted\n              ? !index || seen[seen.length - 1] !== computed\n              : indexOf(seen, computed) < 0\n            ) {\n          if (callback || isLarge) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      if (isLarge) {\n        releaseArray(seen.array);\n        releaseObject(seen);\n      } else if (callback) {\n        releaseArray(seen);\n      }\n      return result;\n    });\n\n    /**\n     * The inverse of `_.zip`, this method splits groups of elements into arrays\n     * composed of elements from each group at their corresponding indexes.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to process.\n     * @returns {Array} Returns a new array of the composed arrays.\n     * @example\n     *\n     * _.unzip([['moe', 30, true], ['larry', 40, false]]);\n     * // => [['moe', 'larry'], [30, 40], [true, false]];\n     */\n    function unzip(array) {\n      var index = -1,\n          length = array ? max(pluck(array, 'length')) : 0,\n          result = Array(length < 0 ? 0 : length);\n\n      while (++index < length) {\n        result[index] = pluck(array, index);\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all occurrences of the passed values removed using\n     * strict equality for comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to filter.\n     * @param {Mixed} [value1, value2, ...] Values to remove.\n     * @returns {Array} Returns a new filtered array.\n     * @example\n     *\n     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);\n     * // => [2, 3, 4]\n     */\n    function without(array) {\n      return difference(array, nativeSlice.call(arguments, 1));\n    }\n\n    /**\n     * Groups the elements of each array at their corresponding indexes. Useful for\n     * separate data sources that are coordinated through matching array indexes.\n     * For a matrix of nested arrays, `_.zip.apply(...)` can transpose the matrix\n     * in a similar fashion.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} [array1, array2, ...] Arrays to process.\n     * @returns {Array} Returns a new array of grouped elements.\n     * @example\n     *\n     * _.zip(['moe', 'larry'], [30, 40], [true, false]);\n     * // => [['moe', 30, true], ['larry', 40, false]]\n     */\n    function zip(array) {\n      return array ? unzip(arguments) : [];\n    }\n\n    /**\n     * Creates an object composed from arrays of `keys` and `values`. Pass either\n     * a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`, or\n     * two arrays, one of `keys` and one of corresponding `values`.\n     *\n     * @static\n     * @memberOf _\n     * @alias object\n     * @category Arrays\n     * @param {Array} keys The array of keys.\n     * @param {Array} [values=[]] The array of values.\n     * @returns {Object} Returns an object composed of the given keys and\n     *  corresponding values.\n     * @example\n     *\n     * _.zipObject(['moe', 'larry'], [30, 40]);\n     * // => { 'moe': 30, 'larry': 40 }\n     */\n    function zipObject(keys, values) {\n      var index = -1,\n          length = keys ? keys.length : 0,\n          result = {};\n\n      while (++index < length) {\n        var key = keys[index];\n        if (values) {\n          result[key] = values[index];\n        } else {\n          result[key[0]] = key[1];\n        }\n      }\n      return result;\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * If `n` is greater than `0`, a function is created that is restricted to\n     * executing `func`, with the `this` binding and arguments of the created\n     * function, only after it is called `n` times. If `n` is less than `1`,\n     * `func` is executed immediately, without a `this` binding or additional\n     * arguments, and its result is returned.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Number} n The number of times the function must be called before\n     * it is executed.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var renderNotes = _.after(notes.length, render);\n     * _.forEach(notes, function(note) {\n     *   note.asyncSave({ 'success': renderNotes });\n     * });\n     * // `renderNotes` is run once, after all notes have saved\n     */\n    function after(n, func) {\n      if (n < 1) {\n        return func();\n      }\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that, when called, invokes `func` with the `this`\n     * binding of `thisArg` and prepends any additional `bind` arguments to those\n     * passed to the bound function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to bind.\n     * @param {Mixed} [thisArg] The `this` binding of `func`.\n     * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var func = function(greeting) {\n     *   return greeting + ' ' + this.name;\n     * };\n     *\n     * func = _.bind(func, { 'name': 'moe' }, 'hi');\n     * func();\n     * // => 'hi moe'\n     */\n    function bind(func, thisArg) {\n      // use `Function#bind` if it exists and is fast\n      // (in V8 `Function#bind` is slower except when partially applied)\n      return support.fastBind || (nativeBind && arguments.length > 2)\n        ? nativeBind.call.apply(nativeBind, arguments)\n        : createBound(func, thisArg, nativeSlice.call(arguments, 2));\n    }\n\n    /**\n     * Binds methods on `object` to `object`, overwriting the existing method.\n     * Method names may be specified as individual arguments or as arrays of method\n     * names. If no method names are provided, all the function properties of `object`\n     * will be bound.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {String} [methodName1, methodName2, ...] Method names on the object to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *  'label': 'docs',\n     *  'onClick': function() { alert('clicked ' + this.label); }\n     * };\n     *\n     * _.bindAll(view);\n     * jQuery('#docs').on('click', view.onClick);\n     * // => alerts 'clicked docs', when the button is clicked\n     */\n    function bindAll(object) {\n      var funcs = arguments.length > 1 ? concat.apply(arrayRef, nativeSlice.call(arguments, 1)) : functions(object),\n          index = -1,\n          length = funcs.length;\n\n      while (++index < length) {\n        var key = funcs[index];\n        object[key] = bind(object[key], object);\n      }\n      return object;\n    }\n\n    /**\n     * Creates a function that, when called, invokes the method at `object[key]`\n     * and prepends any additional `bindKey` arguments to those passed to the bound\n     * function. This method differs from `_.bind` by allowing bound functions to\n     * reference methods that will be redefined or don't yet exist.\n     * See http://michaux.ca/articles/lazy-function-definition-pattern.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Object} object The object the method belongs to.\n     * @param {String} key The key of the method.\n     * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'name': 'moe',\n     *   'greet': function(greeting) {\n     *     return greeting + ' ' + this.name;\n     *   }\n     * };\n     *\n     * var func = _.bindKey(object, 'greet', 'hi');\n     * func();\n     * // => 'hi moe'\n     *\n     * object.greet = function(greeting) {\n     *   return greeting + ', ' + this.name + '!';\n     * };\n     *\n     * func();\n     * // => 'hi, moe!'\n     */\n    function bindKey(object, key) {\n      return createBound(object, key, nativeSlice.call(arguments, 2), indicatorObject);\n    }\n\n    /**\n     * Creates a function that is the composition of the passed functions,\n     * where each function consumes the return value of the function that follows.\n     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.\n     * Each function is executed with the `this` binding of the composed function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} [func1, func2, ...] Functions to compose.\n     * @returns {Function} Returns the new composed function.\n     * @example\n     *\n     * var greet = function(name) { return 'hi ' + name; };\n     * var exclaim = function(statement) { return statement + '!'; };\n     * var welcome = _.compose(exclaim, greet);\n     * welcome('moe');\n     * // => 'hi moe!'\n     */\n    function compose() {\n      var funcs = arguments;\n      return function() {\n        var args = arguments,\n            length = funcs.length;\n\n        while (length--) {\n          args = [funcs[length].apply(this, args)];\n        }\n        return args[0];\n      };\n    }\n\n    /**\n     * Produces a callback bound to an optional `thisArg`. If `func` is a property\n     * name, the created callback will return the property value for a given element.\n     * If `func` is an object, the created callback will return `true` for elements\n     * that contain the equivalent object properties, otherwise it will return `false`.\n     *\n     * Note: All Lo-Dash methods, that accept a `callback` argument, use `_.createCallback`.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Mixed} [func=identity] The value to convert to a callback.\n     * @param {Mixed} [thisArg] The `this` binding of the created callback.\n     * @param {Number} [argCount=3] The number of arguments the callback accepts.\n     * @returns {Function} Returns a callback function.\n     * @example\n     *\n     * var stooges = [\n     *   { 'name': 'moe', 'age': 40 },\n     *   { 'name': 'larry', 'age': 50 }\n     * ];\n     *\n     * // wrap to create custom callback shorthands\n     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {\n     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);\n     *   return !match ? func(callback, thisArg) : function(object) {\n     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];\n     *   };\n     * });\n     *\n     * _.filter(stooges, 'age__gt45');\n     * // => [{ 'name': 'larry', 'age': 50 }]\n     *\n     * // create mixins with support for \"_.pluck\" and \"_.where\" callback shorthands\n     * _.mixin({\n     *   'toLookup': function(collection, callback, thisArg) {\n     *     callback = _.createCallback(callback, thisArg);\n     *     return _.reduce(collection, function(result, value, index, collection) {\n     *       return (result[callback(value, index, collection)] = value, result);\n     *     }, {});\n     *   }\n     * });\n     *\n     * _.toLookup(stooges, 'name');\n     * // => { 'moe': { 'name': 'moe', 'age': 40 }, 'larry': { 'name': 'larry', 'age': 50 } }\n     */\n    function createCallback(func, thisArg, argCount) {\n      if (func == null) {\n        return identity;\n      }\n      var type = typeof func;\n      if (type != 'function') {\n        if (type != 'object') {\n          return function(object) {\n            return object[func];\n          };\n        }\n        var props = keys(func);\n        return function(object) {\n          var length = props.length,\n              result = false;\n          while (length--) {\n            if (!(result = isEqual(object[props[length]], func[props[length]], indicatorObject))) {\n              break;\n            }\n          }\n          return result;\n        };\n      }\n      if (typeof thisArg == 'undefined' || (reThis && !reThis.test(fnToString.call(func)))) {\n        return func;\n      }\n      if (argCount === 1) {\n        return function(value) {\n          return func.call(thisArg, value);\n        };\n      }\n      if (argCount === 2) {\n        return function(a, b) {\n          return func.call(thisArg, a, b);\n        };\n      }\n      if (argCount === 4) {\n        return function(accumulator, value, index, collection) {\n          return func.call(thisArg, accumulator, value, index, collection);\n        };\n      }\n      return function(value, index, collection) {\n        return func.call(thisArg, value, index, collection);\n      };\n    }\n\n    /**\n     * Creates a function that will delay the execution of `func` until after\n     * `wait` milliseconds have elapsed since the last time it was invoked. Pass\n     * an `options` object to indicate that `func` should be invoked on the leading\n     * and/or trailing edge of the `wait` timeout. Subsequent calls to the debounced\n     * function will return the result of the last `func` call.\n     *\n     * Note: If `leading` and `trailing` options are `true`, `func` will be called\n     * on the trailing edge of the timeout only if the the debounced function is\n     * invoked more than once during the `wait` timeout.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to debounce.\n     * @param {Number} wait The number of milliseconds to delay.\n     * @param {Object} options The options object.\n     *  [leading=false] A boolean to specify execution on the leading edge of the timeout.\n     *  [maxWait] The maximum time `func` is allowed to be delayed before it's called.\n     *  [trailing=true] A boolean to specify execution on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * var lazyLayout = _.debounce(calculateLayout, 300);\n     * jQuery(window).on('resize', lazyLayout);\n     *\n     * jQuery('#postbox').on('click', _.debounce(sendMail, 200, {\n     *   'leading': true,\n     *   'trailing': false\n     * });\n     */\n    function debounce(func, wait, options) {\n      var args,\n          result,\n          thisArg,\n          callCount = 0,\n          lastCalled = 0,\n          maxWait = false,\n          maxTimeoutId = null,\n          timeoutId = null,\n          trailing = true;\n\n      function clear() {\n        clearTimeout(maxTimeoutId);\n        clearTimeout(timeoutId);\n        callCount = 0;\n        maxTimeoutId = timeoutId = null;\n      }\n\n      function delayed() {\n        var isCalled = trailing && (!leading || callCount > 1);\n        clear();\n        if (isCalled) {\n          if (maxWait !== false) {\n            lastCalled = new Date;\n          }\n          result = func.apply(thisArg, args);\n        }\n      }\n\n      function maxDelayed() {\n        clear();\n        if (trailing || (maxWait !== wait)) {\n          lastCalled = new Date;\n          result = func.apply(thisArg, args);\n        }\n      }\n\n      wait = nativeMax(0, wait || 0);\n      if (options === true) {\n        var leading = true;\n        trailing = false;\n      } else if (isObject(options)) {\n        leading = options.leading;\n        maxWait = 'maxWait' in options && nativeMax(wait, options.maxWait || 0);\n        trailing = 'trailing' in options ? options.trailing : trailing;\n      }\n      return function() {\n        args = arguments;\n        thisArg = this;\n        callCount++;\n\n        // avoid issues with Titanium and `undefined` timeout ids\n        // https://github.com/appcelerator/titanium_mobile/blob/3_1_0_GA/android/titanium/src/java/ti/modules/titanium/TitaniumModule.java#L185-L192\n        clearTimeout(timeoutId);\n\n        if (maxWait === false) {\n          if (leading && callCount < 2) {\n            result = func.apply(thisArg, args);\n          }\n        } else {\n          var now = new Date;\n          if (!maxTimeoutId && !leading) {\n            lastCalled = now;\n          }\n          var remaining = maxWait - (now - lastCalled);\n          if (remaining <= 0) {\n            clearTimeout(maxTimeoutId);\n            maxTimeoutId = null;\n            lastCalled = now;\n            result = func.apply(thisArg, args);\n          }\n          else if (!maxTimeoutId) {\n            maxTimeoutId = setTimeout(maxDelayed, remaining);\n          }\n        }\n        if (wait !== maxWait) {\n          timeoutId = setTimeout(delayed, wait);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Defers executing the `func` function until the current call stack has cleared.\n     * Additional arguments will be passed to `func` when it is invoked.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to defer.\n     * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the function with.\n     * @returns {Number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function() { alert('deferred'); });\n     * // returns from the function before `alert` is called\n     */\n    function defer(func) {\n      var args = nativeSlice.call(arguments, 1);\n      return setTimeout(function() { func.apply(undefined, args); }, 1);\n    }\n    // use `setImmediate` if it's available in Node.js\n    if (isV8 && freeModule && typeof setImmediate == 'function') {\n      defer = bind(setImmediate, context);\n    }\n\n    /**\n     * Executes the `func` function after `wait` milliseconds. Additional arguments\n     * will be passed to `func` when it is invoked.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to delay.\n     * @param {Number} wait The number of milliseconds to delay execution.\n     * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the function with.\n     * @returns {Number} Returns the timer id.\n     * @example\n     *\n     * var log = _.bind(console.log, console);\n     * _.delay(log, 1000, 'logged later');\n     * // => 'logged later' (Appears after one second.)\n     */\n    function delay(func, wait) {\n      var args = nativeSlice.call(arguments, 2);\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * passed, it will be used to determine the cache key for storing the result\n     * based on the arguments passed to the memoized function. By default, the first\n     * argument passed to the memoized function is used as the cache key. The `func`\n     * is executed with the `this` binding of the memoized function. The result\n     * cache is exposed as the `cache` property on the memoized function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] A function used to resolve the cache key.\n     * @returns {Function} Returns the new memoizing function.\n     * @example\n     *\n     * var fibonacci = _.memoize(function(n) {\n     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);\n     * });\n     */\n    function memoize(func, resolver) {\n      function memoized() {\n        var cache = memoized.cache,\n            key = keyPrefix + (resolver ? resolver.apply(this, arguments) : arguments[0]);\n\n        return hasOwnProperty.call(cache, key)\n          ? cache[key]\n          : (cache[key] = func.apply(this, arguments));\n      }\n      memoized.cache = {};\n      return memoized;\n    }\n\n    /**\n     * Creates a function that is restricted to execute `func` once. Repeat calls to\n     * the function will return the value of the first call. The `func` is executed\n     * with the `this` binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // `initialize` executes `createApplication` once\n     */\n    function once(func) {\n      var ran,\n          result;\n\n      return function() {\n        if (ran) {\n          return result;\n        }\n        ran = true;\n        result = func.apply(this, arguments);\n\n        // clear the `func` variable so the function may be garbage collected\n        func = null;\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that, when called, invokes `func` with any additional\n     * `partial` arguments prepended to those passed to the new function. This\n     * method is similar to `_.bind`, except it does **not** alter the `this` binding.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * var greet = function(greeting, name) { return greeting + ' ' + name; };\n     * var hi = _.partial(greet, 'hi');\n     * hi('moe');\n     * // => 'hi moe'\n     */\n    function partial(func) {\n      return createBound(func, nativeSlice.call(arguments, 1));\n    }\n\n    /**\n     * This method is similar to `_.partial`, except that `partial` arguments are\n     * appended to those passed to the new function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * var defaultsDeep = _.partialRight(_.merge, _.defaults);\n     *\n     * var options = {\n     *   'variable': 'data',\n     *   'imports': { 'jq': $ }\n     * };\n     *\n     * defaultsDeep(options, _.templateSettings);\n     *\n     * options.variable\n     * // => 'data'\n     *\n     * options.imports\n     * // => { '_': _, 'jq': $ }\n     */\n    function partialRight(func) {\n      return createBound(func, nativeSlice.call(arguments, 1), null, indicatorObject);\n    }\n\n    /**\n     * Creates a function that, when executed, will only call the `func` function\n     * at most once per every `wait` milliseconds. Pass an `options` object to\n     * indicate that `func` should be invoked on the leading and/or trailing edge\n     * of the `wait` timeout. Subsequent calls to the throttled function will\n     * return the result of the last `func` call.\n     *\n     * Note: If `leading` and `trailing` options are `true`, `func` will be called\n     * on the trailing edge of the timeout only if the the throttled function is\n     * invoked more than once during the `wait` timeout.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to throttle.\n     * @param {Number} wait The number of milliseconds to throttle executions to.\n     * @param {Object} options The options object.\n     *  [leading=true] A boolean to specify execution on the leading edge of the timeout.\n     *  [trailing=true] A boolean to specify execution on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * var throttled = _.throttle(updatePosition, 100);\n     * jQuery(window).on('scroll', throttled);\n     *\n     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {\n     *   'trailing': false\n     * }));\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (options === false) {\n        leading = false;\n      } else if (isObject(options)) {\n        leading = 'leading' in options ? options.leading : leading;\n        trailing = 'trailing' in options ? options.trailing : trailing;\n      }\n      options = getObject();\n      options.leading = leading;\n      options.maxWait = wait;\n      options.trailing = trailing;\n\n      var result = debounce(func, wait, options);\n      releaseObject(options);\n      return result;\n    }\n\n    /**\n     * Creates a function that passes `value` to the `wrapper` function as its\n     * first argument. Additional arguments passed to the function are appended\n     * to those passed to the `wrapper` function. The `wrapper` is executed with\n     * the `this` binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Mixed} value The value to wrap.\n     * @param {Function} wrapper The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var hello = function(name) { return 'hello ' + name; };\n     * hello = _.wrap(hello, function(func) {\n     *   return 'before, ' + func('moe') + ', after';\n     * });\n     * hello();\n     * // => 'before, hello moe, after'\n     */\n    function wrap(value, wrapper) {\n      return function() {\n        var args = [value];\n        push.apply(args, arguments);\n        return wrapper.apply(this, args);\n      };\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Converts the characters `&`, `<`, `>`, `\"`, and `'` in `string` to their\n     * corresponding HTML entities.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {String} string The string to escape.\n     * @returns {String} Returns the escaped string.\n     * @example\n     *\n     * _.escape('Moe, Larry & Curly');\n     * // => 'Moe, Larry &amp; Curly'\n     */\n    function escape(string) {\n      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);\n    }\n\n    /**\n     * This method returns the first argument passed to it.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {Mixed} value Any value.\n     * @returns {Mixed} Returns `value`.\n     * @example\n     *\n     * var moe = { 'name': 'moe' };\n     * moe === _.identity(moe);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Adds functions properties of `object` to the `lodash` function and chainable\n     * wrapper.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {Object} object The object of function properties to add to `lodash`.\n     * @example\n     *\n     * _.mixin({\n     *   'capitalize': function(string) {\n     *     return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n     *   }\n     * });\n     *\n     * _.capitalize('moe');\n     * // => 'Moe'\n     *\n     * _('moe').capitalize();\n     * // => 'Moe'\n     */\n    function mixin(object) {\n      forEach(functions(object), function(methodName) {\n        var func = lodash[methodName] = object[methodName];\n\n        lodash.prototype[methodName] = function() {\n          var value = this.__wrapped__,\n              args = [value];\n\n          push.apply(args, arguments);\n          var result = func.apply(lodash, args);\n          return (value && typeof value == 'object' && value === result)\n            ? this\n            : new lodashWrapper(result);\n        };\n      });\n    }\n\n    /**\n     * Reverts the '_' variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      context._ = oldDash;\n      return this;\n    }\n\n    /**\n     * Converts the given `value` into an integer of the specified `radix`.\n     * If `radix` is `undefined` or `0`, a `radix` of `10` is used unless the\n     * `value` is a hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * Note: This method avoids differences in native ES3 and ES5 `parseInt`\n     * implementations. See http://es5.github.com/#E.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {String} value The value to parse.\n     * @param {Number} [radix] The radix used to interpret the value to parse.\n     * @returns {Number} Returns the new integer value.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     */\n    var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function(value, radix) {\n      // Firefox and Opera still follow the ES3 specified implementation of `parseInt`\n      return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, '') : value, radix || 0);\n    };\n\n    /**\n     * Produces a random number between `min` and `max` (inclusive). If only one\n     * argument is passed, a number between `0` and the given number will be returned.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {Number} [min=0] The minimum possible value.\n     * @param {Number} [max=1] The maximum possible value.\n     * @returns {Number} Returns a random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => a number between 0 and 5\n     *\n     * _.random(5);\n     * // => also a number between 0 and 5\n     */\n    function random(min, max) {\n      if (min == null && max == null) {\n        max = 1;\n      }\n      min = +min || 0;\n      if (max == null) {\n        max = min;\n        min = 0;\n      } else {\n        max = +max || 0;\n      }\n      var rand = nativeRandom();\n      return (min % 1 || max % 1)\n        ? min + nativeMin(rand * (max - min + parseFloat('1e-' + ((rand +'').length - 1))), max)\n        : min + floor(rand * (max - min + 1));\n    }\n\n    /**\n     * Resolves the value of `property` on `object`. If `property` is a function,\n     * it will be invoked with the `this` binding of `object` and its result returned,\n     * else the property value is returned. If `object` is falsey, then `undefined`\n     * is returned.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {Object} object The object to inspect.\n     * @param {String} property The property to get the value of.\n     * @returns {Mixed} Returns the resolved value.\n     * @example\n     *\n     * var object = {\n     *   'cheese': 'crumpets',\n     *   'stuff': function() {\n     *     return 'nonsense';\n     *   }\n     * };\n     *\n     * _.result(object, 'cheese');\n     * // => 'crumpets'\n     *\n     * _.result(object, 'stuff');\n     * // => 'nonsense'\n     */\n    function result(object, property) {\n      var value = object ? object[property] : undefined;\n      return isFunction(value) ? object[property]() : value;\n    }\n\n    /**\n     * A micro-templating method that handles arbitrary delimiters, preserves\n     * whitespace, and correctly escapes quotes within interpolated code.\n     *\n     * Note: In the development build, `_.template` utilizes sourceURLs for easier\n     * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n     *\n     * For more information on precompiling templates see:\n     * http://lodash.com/#custom-builds\n     *\n     * For more information on Chrome extension sandboxes see:\n     * http://developer.chrome.com/stable/extensions/sandboxingEval.html\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {String} text The template text.\n     * @param {Object} data The data object used to populate the text.\n     * @param {Object} options The options object.\n     *  escape - The \"escape\" delimiter regexp.\n     *  evaluate - The \"evaluate\" delimiter regexp.\n     *  interpolate - The \"interpolate\" delimiter regexp.\n     *  sourceURL - The sourceURL of the template's compiled source.\n     *  variable - The data object variable name.\n     * @returns {Function|String} Returns a compiled function when no `data` object\n     *  is given, else it returns the interpolated text.\n     * @example\n     *\n     * // using a compiled template\n     * var compiled = _.template('hello <%= name %>');\n     * compiled({ 'name': 'moe' });\n     * // => 'hello moe'\n     *\n     * var list = '<% _.forEach(people, function(name) { %><li><%= name %></li><% }); %>';\n     * _.template(list, { 'people': ['moe', 'larry'] });\n     * // => '<li>moe</li><li>larry</li>'\n     *\n     * // using the \"escape\" delimiter to escape HTML in data property values\n     * _.template('<b><%- value %></b>', { 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // using the ES6 delimiter as an alternative to the default \"interpolate\" delimiter\n     * _.template('hello ${ name }', { 'name': 'curly' });\n     * // => 'hello curly'\n     *\n     * // using the internal `print` function in \"evaluate\" delimiters\n     * _.template('<% print(\"hello \" + epithet); %>!', { 'epithet': 'stooge' });\n     * // => 'hello stooge!'\n     *\n     * // using custom template delimiters\n     * _.templateSettings = {\n     *   'interpolate': /{{([\\s\\S]+?)}}/g\n     * };\n     *\n     * _.template('hello {{ name }}!', { 'name': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // using the `sourceURL` option to specify a custom sourceURL for the template\n     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector\n     *\n     * // using the `variable` option to ensure a with-statement isn't used in the compiled template\n     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     *   var __t, __p = '', __e = _.escape;\n     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';\n     *   return __p;\n     * }\n     *\n     * // using the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and a stack trace\n     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(text, data, options) {\n      // based on John Resig's `tmpl` implementation\n      // http://ejohn.org/blog/javascript-micro-templating/\n      // and Laura Doktorova's doT.js\n      // https://github.com/olado/doT\n      var settings = lodash.templateSettings;\n      text || (text = '');\n\n      // avoid missing dependencies when `iteratorTemplate` is not defined\n      options = defaults({}, options, settings);\n\n      var imports = defaults({}, options.imports, settings.imports),\n          importsKeys = keys(imports),\n          importsValues = values(imports);\n\n      var isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // compile the regexp to match each delimiter\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // escape characters that cannot be included in string literals\n        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // replace delimiters with snippets\n        if (escapeValue) {\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // the JS engine embedded in Adobe products requires returning the `match`\n        // string in order to produce the correct `offset` value\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // if `variable` is not specified, wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain\n      var variable = options.variable,\n          hasVariable = variable;\n\n      if (!hasVariable) {\n        variable = 'obj';\n        source = 'with (' + variable + ') {\\n' + source + '\\n}\\n';\n      }\n      // cleanup code by stripping empty strings\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // frame code as the function body\n      source = 'function(' + variable + ') {\\n' +\n        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\\n') +\n        \"var __t, __p = '', __e = _.escape\" +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      // Use a sourceURL for easier debugging and wrap in a multi-line comment to\n      // avoid issues with Narwhal, IE conditional compilation, and the JS engine\n      // embedded in Adobe products.\n      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n      var sourceURL = '\\n/*\\n//@ sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\\n*/';\n\n      try {\n        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);\n      } catch(e) {\n        e.source = source;\n        throw e;\n      }\n      if (data) {\n        return result(data);\n      }\n      // provide the compiled function's source via its `toString` method, in\n      // supported environments, or the `source` property as a convenience for\n      // inlining compiled templates during the build process\n      result.source = source;\n      return result;\n    }\n\n    /**\n     * Executes the `callback` function `n` times, returning an array of the results\n     * of each `callback` execution. The `callback` is bound to `thisArg` and invoked\n     * with one argument; (index).\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {Number} n The number of times to execute the callback.\n     * @param {Function} callback The function called per iteration.\n     * @param {Mixed} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of the results of each `callback` execution.\n     * @example\n     *\n     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));\n     * // => [3, 6, 4]\n     *\n     * _.times(3, function(n) { mage.castSpell(n); });\n     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively\n     *\n     * _.times(3, function(n) { this.cast(n); }, mage);\n     * // => also calls `mage.castSpell(n)` three times\n     */\n    function times(n, callback, thisArg) {\n      n = (n = +n) > -1 ? n : 0;\n      var index = -1,\n          result = Array(n);\n\n      callback = lodash.createCallback(callback, thisArg, 1);\n      while (++index < n) {\n        result[index] = callback(index);\n      }\n      return result;\n    }\n\n    /**\n     * The inverse of `_.escape`, this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their\n     * corresponding characters.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {String} string The string to unescape.\n     * @returns {String} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('Moe, Larry &amp; Curly');\n     * // => 'Moe, Larry & Curly'\n     */\n    function unescape(string) {\n      return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is passed, the ID will be appended to it.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {String} [prefix] The value to prefix the ID with.\n     * @returns {String} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return String(prefix == null ? '' : prefix) + id;\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Invokes `interceptor` with the `value` as the first argument, and then\n     * returns `value`. The purpose of this method is to \"tap into\" a method chain,\n     * in order to perform operations on intermediate results within the chain.\n     *\n     * @static\n     * @memberOf _\n     * @category Chaining\n     * @param {Mixed} value The value to pass to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {Mixed} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3, 4])\n     *  .filter(function(num) { return num % 2 == 0; })\n     *  .tap(alert)\n     *  .map(function(num) { return num * num; })\n     *  .value();\n     * // => // [2, 4] (alerted)\n     * // => [4, 16]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * Produces the `toString` result of the wrapped value.\n     *\n     * @name toString\n     * @memberOf _\n     * @category Chaining\n     * @returns {String} Returns the string result.\n     * @example\n     *\n     * _([1, 2, 3]).toString();\n     * // => '1,2,3'\n     */\n    function wrapperToString() {\n      return String(this.__wrapped__);\n    }\n\n    /**\n     * Extracts the wrapped value.\n     *\n     * @name valueOf\n     * @memberOf _\n     * @alias value\n     * @category Chaining\n     * @returns {Mixed} Returns the wrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).valueOf();\n     * // => [1, 2, 3]\n     */\n    function wrapperValueOf() {\n      return this.__wrapped__;\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    // add functions that return wrapped values when chaining\n    lodash.after = after;\n    lodash.assign = assign;\n    lodash.at = at;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.compact = compact;\n    lodash.compose = compose;\n    lodash.countBy = countBy;\n    lodash.createCallback = createCallback;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.filter = filter;\n    lodash.flatten = flatten;\n    lodash.forEach = forEach;\n    lodash.forIn = forIn;\n    lodash.forOwn = forOwn;\n    lodash.functions = functions;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.invert = invert;\n    lodash.invoke = invoke;\n    lodash.keys = keys;\n    lodash.map = map;\n    lodash.max = max;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.min = min;\n    lodash.omit = omit;\n    lodash.once = once;\n    lodash.pairs = pairs;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.pick = pick;\n    lodash.pluck = pluck;\n    lodash.range = range;\n    lodash.reject = reject;\n    lodash.rest = rest;\n    lodash.shuffle = shuffle;\n    lodash.sortBy = sortBy;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.times = times;\n    lodash.toArray = toArray;\n    lodash.transform = transform;\n    lodash.union = union;\n    lodash.uniq = uniq;\n    lodash.unzip = unzip;\n    lodash.values = values;\n    lodash.where = where;\n    lodash.without = without;\n    lodash.wrap = wrap;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n\n    // add aliases\n    lodash.collect = map;\n    lodash.drop = rest;\n    lodash.each = forEach;\n    lodash.extend = assign;\n    lodash.methods = functions;\n    lodash.object = zipObject;\n    lodash.select = filter;\n    lodash.tail = rest;\n    lodash.unique = uniq;\n\n    // add functions to `lodash.prototype`\n    mixin(lodash);\n\n    // add Underscore compat\n    lodash.chain = lodash;\n    lodash.prototype.chain = function() { return this; };\n\n    /*--------------------------------------------------------------------------*/\n\n    // add functions that return unwrapped values when chaining\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.contains = contains;\n    lodash.escape = escape;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.has = has;\n    lodash.identity = identity;\n    lodash.indexOf = indexOf;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isBoolean = isBoolean;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isNaN = isNaN;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isString = isString;\n    lodash.isUndefined = isUndefined;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.mixin = mixin;\n    lodash.noConflict = noConflict;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.result = result;\n    lodash.runInContext = runInContext;\n    lodash.size = size;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.template = template;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n\n    // add aliases\n    lodash.all = every;\n    lodash.any = some;\n    lodash.detect = find;\n    lodash.findWhere = find;\n    lodash.foldl = reduce;\n    lodash.foldr = reduceRight;\n    lodash.include = contains;\n    lodash.inject = reduce;\n\n    forOwn(lodash, function(func, methodName) {\n      if (!lodash.prototype[methodName]) {\n        lodash.prototype[methodName] = function() {\n          var args = [this.__wrapped__];\n          push.apply(args, arguments);\n          return func.apply(lodash, args);\n        };\n      }\n    });\n\n    /*--------------------------------------------------------------------------*/\n\n    // add functions capable of returning wrapped and unwrapped values when chaining\n    lodash.first = first;\n    lodash.last = last;\n\n    // add aliases\n    lodash.take = first;\n    lodash.head = first;\n\n    forOwn(lodash, function(func, methodName) {\n      if (!lodash.prototype[methodName]) {\n        lodash.prototype[methodName]= function(callback, thisArg) {\n          var result = func(this.__wrapped__, callback, thisArg);\n          return callback == null || (thisArg && typeof callback != 'function')\n            ? result\n            : new lodashWrapper(result);\n        };\n      }\n    });\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type String\n     */\n    lodash.VERSION = '1.3.1';\n\n    // add \"Chaining\" functions to the wrapper\n    lodash.prototype.toString = wrapperToString;\n    lodash.prototype.value = wrapperValueOf;\n    lodash.prototype.valueOf = wrapperValueOf;\n\n    // add `Array` functions that return unwrapped values\n    forEach(['join', 'pop', 'shift'], function(methodName) {\n      var func = arrayRef[methodName];\n      lodash.prototype[methodName] = function() {\n        return func.apply(this.__wrapped__, arguments);\n      };\n    });\n\n    // add `Array` functions that return the wrapped value\n    forEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {\n      var func = arrayRef[methodName];\n      lodash.prototype[methodName] = function() {\n        func.apply(this.__wrapped__, arguments);\n        return this;\n      };\n    });\n\n    // add `Array` functions that return new wrapped values\n    forEach(['concat', 'slice', 'splice'], function(methodName) {\n      var func = arrayRef[methodName];\n      lodash.prototype[methodName] = function() {\n        return new lodashWrapper(func.apply(this.__wrapped__, arguments));\n      };\n    });\n\n    return lodash;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // expose Lo-Dash\n  var _ = runInContext();\n\n  // some AMD build optimizers, like r.js, check for specific condition patterns like the following:\n  if (true) {\n    // Expose Lo-Dash to the global object even when an AMD loader is present in\n    // case Lo-Dash was injected by a third-party script and not intended to be\n    // loaded as a module. The global assignment can be reverted in the Lo-Dash\n    // module via its `noConflict()` method.\n    window._ = _;\n\n    // define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return _;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  // check for `exports` after `define` in case a build optimizer adds an `exports` object\n  else {}\n}(this));\n\n\n//# sourceURL=webpack://capstone-2/./node_modules/lodash/dist/lodash.js?");

/***/ }),

/***/ "./src/Style.css":
/*!***********************!*\
  !*** ./src/Style.css ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_Style_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./Style.css */ \"./node_modules/css-loader/dist/cjs.js!./src/Style.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\n\n      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\n    \noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_Style_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_Style_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_Style_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_Style_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n\n\n//# sourceURL=webpack://capstone-2/./src/Style.css?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://capstone-2/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;\n\n//# sourceURL=webpack://capstone-2/./node_modules/style-loader/dist/runtime/insertBySelector.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;\n\n//# sourceURL=webpack://capstone-2/./node_modules/style-loader/dist/runtime/insertStyleElement.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;\n\n//# sourceURL=webpack://capstone-2/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;\n\n//# sourceURL=webpack://capstone-2/./node_modules/style-loader/dist/runtime/styleDomAPI.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;\n\n//# sourceURL=webpack://capstone-2/./node_modules/style-loader/dist/runtime/styleTagTransform.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/dist/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Style_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Style.css */ \"./src/Style.css\");\n\r\n\r\n\r\nfunction component() {\r\n    const element = document.createElement('div');\r\n \r\n    // Lodash, now imported by this script\r\n    element.innerHTML = lodash__WEBPACK_IMPORTED_MODULE_0___default().join(['Hello', 'webpack'], ' ');\r\n   element.classList.add('hello');\r\n \r\n    return element;\r\n  }\r\n \r\n  document.body.appendChild(component());\n\n//# sourceURL=webpack://capstone-2/./src/index.js?");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./src/index.js"));
/******/ }
]);